"use strict";(self.webpackChunksolid=self.webpackChunksolid||[]).push([[929],{3905:(e,a,t)=>{t.d(a,{Zo:()=>u,kt:()=>b});var n=t(7294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,o=function(e,a){if(null==e)return{};var t,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),d=function(e){var a=n.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},u=function(e){var a=d(e.components);return n.createElement(l.Provider,{value:a},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=d(t),m=o,b=c["".concat(l,".").concat(m)]||c[m]||p[m]||r;return t?n.createElement(b,s(s({ref:a},u),{},{components:t})):n.createElement(b,s({ref:a},u))}));function b(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=m;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i[c]="string"==typeof e?e:o,s[1]=i;for(var d=2;d<r;d++)s[d]=t[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4097:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var n=t(7462),o=(t(7294),t(3905));const r={sidebar_position:4},s="Patrones de dise\xf1o de comportamiento",i={unversionedId:"tutorial-extras/comportamiento",id:"tutorial-extras/comportamiento",title:"Patrones de dise\xf1o de comportamiento",description:"\xbfQu\xe9 son los patrones de dise\xf1o de compartamiento?",source:"@site/docs/tutorial-extras/04-comportamiento.md",sourceDirName:"tutorial-extras",slug:"/tutorial-extras/comportamiento",permalink:"/solid-doc/docs/tutorial-extras/comportamiento",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/tutorial-extras/04-comportamiento.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Patrones de dise\xf1o estructurales",permalink:"/solid-doc/docs/tutorial-extras/Estructurales"}},l={},d=[{value:"\xbfQu\xe9 son los patrones de dise\xf1o de compartamiento?",id:"qu\xe9-son-los-patrones-de-dise\xf1o-de-compartamiento",level:2},{value:"Observer",id:"observer",level:3},{value:"Desventajas de Observer",id:"desventajas-de-observer",level:4}],u={toc:d},c="wrapper";function p(e){let{components:a,...t}=e;return(0,o.kt)(c,(0,n.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"patrones-de-dise\xf1o-de-comportamiento"},"Patrones de dise\xf1o de comportamiento"),(0,o.kt)("h2",{id:"qu\xe9-son-los-patrones-de-dise\xf1o-de-compartamiento"},"\xbfQu\xe9 son los patrones de dise\xf1o de compartamiento?"),(0,o.kt)("p",null,"Los patrones de comportamiento son un conjunto de patrones de dise\xf1o que se utilizan para resolver problemas relacionados con la comunicaci\xf3n y el comportamiento entre objetos en un sistema. Estos patrones se centran en la forma en que los objetos interact\xfaan entre s\xed y en c\xf3mo se distribuyen las responsabilidades entre ellos."),(0,o.kt)("p",null,"Algunos ejemplos de patrones de comportamiento son:"),(0,o.kt)("p",null,"Patr\xf3n Observer: Este patr\xf3n se utiliza cuando se necesita notificar a varios objetos sobre un cambio en el estado de un objeto. El patr\xf3n Observer define una relaci\xf3n de uno a muchos entre los objetos, de modo que cuando el objeto cambia su estado, todos los objetos registrados son notificados y actualizados autom\xe1ticamente."),(0,o.kt)("p",null,"Patr\xf3n Strategy: Este patr\xf3n se utiliza cuando se necesita cambiar din\xe1micamente el algoritmo utilizado por un objeto en tiempo de ejecuci\xf3n. El patr\xf3n Strategy permite encapsular diferentes algoritmos en clases separadas y permitir que el objeto utilice uno u otro en funci\xf3n de la situaci\xf3n."),(0,o.kt)("p",null,"Patr\xf3n Command: Este patr\xf3n se utiliza cuando se necesita encapsular una solicitud como un objeto, permitiendo la parametrizaci\xf3n de los clientes con diferentes solicitudes y la ejecuci\xf3n de diferentes comandos en diferentes momentos. El patr\xf3n Command separa la responsabilidad de solicitar una acci\xf3n de la implementaci\xf3n real de la acci\xf3n."),(0,o.kt)("p",null,"Patr\xf3n Chain of Responsibility: Este patr\xf3n se utiliza cuando se necesita procesar una solicitud a trav\xe9s de una cadena de objetos que tienen la posibilidad de manejarla. El patr\xf3n Chain of Responsibility establece una cadena de objetos, donde cada objeto tiene la oportunidad de manejar la solicitud o pasarla al siguiente objeto de la cadena."),(0,o.kt)("p",null,"Patr\xf3n Template Method: Este patr\xf3n se utiliza cuando se necesita definir un algoritmo en una clase base, pero permitir que las subclases proporcionen implementaciones espec\xedficas de algunos pasos. El patr\xf3n Template Method define una estructura de algoritmo en una clase base y permite que las subclases redefinan o extiendan partes espec\xedficas del algoritmo."),(0,o.kt)("p",null,"Patr\xf3n Interpreter: Este patr\xf3n se utiliza cuando se necesita interpretar y ejecutar un lenguaje de expresiones. El patr\xf3n Interpreter define una gram\xe1tica para el lenguaje de expresiones y proporciona una clase int\xe9rprete que utiliza la gram\xe1tica para interpretar y ejecutar las expresiones."),(0,o.kt)("p",null,"Estos son solo algunos ejemplos de patrones de comportamiento que se utilizan en el dise\xf1o de sistemas orientados a objetos. Cada patr\xf3n tiene sus propias ventajas y desventajas y debe evaluarse cuidadosamente antes de aplicarlo en una situaci\xf3n determinada."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Patr\xf3n de Comportamiento"),(0,o.kt)("th",{parentName:"tr",align:null},"Descripci\xf3n"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Observer"),(0,o.kt)("td",{parentName:"tr",align:null},"Define una relaci\xf3n uno a muchos entre objetos, de modo que cuando un objeto cambia su estado, todos los objetos registrados son notificados y actualizados autom\xe1ticamente.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Strategy"),(0,o.kt)("td",{parentName:"tr",align:null},"Permite cambiar din\xe1micamente el algoritmo utilizado por un objeto en tiempo de ejecuci\xf3n.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Command"),(0,o.kt)("td",{parentName:"tr",align:null},"Encapsula una solicitud como un objeto, permitiendo la parametrizaci\xf3n de los clientes con diferentes solicitudes y la ejecuci\xf3n de diferentes comandos en diferentes momentos.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Chain of Responsibility"),(0,o.kt)("td",{parentName:"tr",align:null},"Procesa una solicitud a trav\xe9s de una cadena de objetos que tienen la posibilidad de manejarla.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Template Method"),(0,o.kt)("td",{parentName:"tr",align:null},"Define una estructura de algoritmo en una clase base y permite que las subclases redefinan o extiendan partes espec\xedficas del algoritmo.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Interpreter"),(0,o.kt)("td",{parentName:"tr",align:null},"Interpreta y ejecuta un lenguaje de expresiones.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"State"),(0,o.kt)("td",{parentName:"tr",align:null},"Permite a un objeto cambiar su comportamiento cuando su estado interno cambia.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Iterator"),(0,o.kt)("td",{parentName:"tr",align:null},"Proporciona una forma de acceder secuencialmente a los elementos de una colecci\xf3n sin exponer su representaci\xf3n subyacente.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Mediator"),(0,o.kt)("td",{parentName:"tr",align:null},"Define un objeto que encapsula la forma en que los objetos interact\xfaan entre s\xed, promoviendo el bajo acoplamiento y la independencia entre ellos.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Memento"),(0,o.kt)("td",{parentName:"tr",align:null},"Permite capturar y restaurar el estado interno de un objeto sin violar el principio de encapsulamiento.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Visitor"),(0,o.kt)("td",{parentName:"tr",align:null},"Permite definir una nueva operaci\xf3n sin cambiar las clases de los objetos sobre los que opera.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Null Object"),(0,o.kt)("td",{parentName:"tr",align:null},'Provee un objeto "nulo" que act\xfaa como sustituto de otro objeto que no est\xe1 disponible o que no existe.')))),(0,o.kt)("h3",{id:"observer"},"Observer"),(0,o.kt)("p",null,"El patr\xf3n Observer es un patr\xf3n de dise\xf1o de comportamiento que se utiliza cuando se desea establecer una relaci\xf3n uno a muchos entre objetos. El patr\xf3n Observer define un objeto (llamado sujeto) que mantiene una lista de suscriptores (observadores) y notifica autom\xe1ticamente a todos los observadores cuando cambia su estado."),(0,o.kt)("p",null,"El patr\xf3n Observer consta de los siguientes elementos:"),(0,o.kt)("p",null,"Sujeto: Es el objeto que mantiene una lista de observadores y notifica autom\xe1ticamente a todos los observadores cuando su estado cambia.\nObservador: Es una interfaz que define el m\xe9todo de actualizaci\xf3n, que se llama cuando el sujeto notifica a los observadores sobre un cambio de estado.\nObservadores concretos: Son objetos que implementan la interfaz Observador y se registran para recibir notificaciones del sujeto.\nAqu\xed hay un ejemplo de c\xf3digo en PHP que ilustra c\xf3mo implementar el patr\xf3n Observer:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// Definir la interfaz Observador\ninterface Observador {\n    public function actualizar(Sujeto $sujeto);\n}\n\n// Definir la clase Sujeto\nclass Sujeto {\n    private $observadores = array();\n    private $estado;\n\n    public function agregarObservador(Observador $observador) {\n        $this->observadores[] = $observador;\n    }\n\n    public function eliminarObservador(Observador $observador) {\n        $index = array_search($observador, $this->observadores);\n        if ($index !== false) {\n            unset($this->observadores[$index]);\n        }\n    }\n\n    public function notificarObservadores() {\n        foreach ($this->observadores as $observador) {\n            $observador->actualizar($this);\n        }\n    }\n\n    public function setEstado($estado) {\n        $this->estado = $estado;\n        $this->notificarObservadores();\n    }\n\n    public function getEstado() {\n        return $this->estado;\n    }\n}\n\n// Definir una clase Observador concreta\nclass ObservadorConcreto implements Observador {\n    private $nombre;\n\n    public function __construct($nombre) {\n        $this->nombre = $nombre;\n    }\n\n    public function actualizar(Sujeto $sujeto) {\n        echo "Observador {$this->nombre} ha sido notificado. El nuevo estado del sujeto es: {$sujeto->getEstado()}<br>";\n    }\n}\n\n// Uso del patr\xf3n Observer\n$sujeto = new Sujeto();\n\n$observador1 = new ObservadorConcreto("Observador 1");\n$observador2 = new ObservadorConcreto("Observador 2");\n\n$sujeto->agregarObservador($observador1);\n$sujeto->agregarObservador($observador2);\n\n$sujeto->setEstado("estado 1");\n\n$sujeto->eliminarObservador($observador2);\n\n$sujeto->setEstado("estado 2");\n')),(0,o.kt)("p",null,"En este ejemplo, la clase ",(0,o.kt)("strong",{parentName:"p"},"Sujeto")," mantiene una lista de ",(0,o.kt)("strong",{parentName:"p"},"observadores")," y notifica a todos los observadores registrados cuando su estado cambia mediante el m\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"notificarObservadores()"),". Los observadores concretos, en este caso ",(0,o.kt)("strong",{parentName:"p"},"ObservadorConcreto"),", implementan la interfaz Observador y se registran en el sujeto mediante el m\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"agregarObservador()"),". Cuando el estado del sujeto cambia, los observadores son notificados autom\xe1ticamente y se les llama al m\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"actualizar()"),". En este m\xe9todo, los observadores concretos realizan las operaciones necesarias con la informaci\xf3n actualizada del sujeto."),(0,o.kt)("p",null,"En este ejemplo, se crean dos observadores concretos y se registran en el sujeto. Luego se cambia el estado del sujeto y se notifica autom\xe1ticamente a los observadores registrados. Despu\xe9s, se elimina uno de los observadores y se cambia el estado del sujeto nuevamente, pero solo se notifica al observador que sigue registrado."),(0,o.kt)("p",null,"Este ejemplo muestra c\xf3mo el patr\xf3n Observer se puede utilizar para implementar la comunicaci\xf3n entre objetos de una manera eficiente y flexible."),(0,o.kt)("h4",{id:"desventajas-de-observer"},"Desventajas de Observer"),(0,o.kt)("p",null,"Aunque el patr\xf3n Observer tiene muchas ventajas, tambi\xe9n tiene algunas desventajas que es importante tener en cuenta:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Acoplamiento excesivo: El patr\xf3n Observer puede llevar a un acoplamiento excesivo entre el sujeto y los observadores. Los observadores pueden depender demasiado del sujeto, lo que puede hacer que sea dif\xedcil reutilizarlos en otros contextos.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Actualizaciones innecesarias: A veces, los observadores pueden recibir actualizaciones innecesarias del sujeto, lo que puede hacer que el sistema sea menos eficiente. Esto puede ser especialmente problem\xe1tico si el sujeto tiene muchos observadores.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Orden de actualizaci\xf3n: El orden en que se actualizan los observadores puede ser importante en algunos casos. Si el orden no se maneja adecuadamente, puede llevar a errores o comportamientos inesperados en el sistema.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Complejidad: La implementaci\xf3n del patr\xf3n Observer puede ser compleja en algunos casos, especialmente si el sistema tiene muchos sujetos y observadores. Esto puede hacer que el c\xf3digo sea m\xe1s dif\xedcil de entender y mantener."))),(0,o.kt)("p",null,"Es importante tener en cuenta estas desventajas al decidir si el patr\xf3n Observer es apropiado para un sistema en particular. En algunos casos, el patr\xf3n Observer puede ser la mejor opci\xf3n, pero en otros casos, puede haber patrones m\xe1s apropiados o soluciones alternativas."))}p.isMDXComponent=!0}}]);