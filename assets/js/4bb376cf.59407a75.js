"use strict";(self.webpackChunksolid=self.webpackChunksolid||[]).push([[929],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>b});var n=t(7294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,o=function(e,a){if(null==e)return{};var t,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),d=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},c=function(e){var a=d(e.components);return n.createElement(s.Provider,{value:a},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=d(t),m=o,b=u["".concat(s,".").concat(m)]||u[m]||p[m]||r;return t?n.createElement(b,l(l({ref:a},c),{},{components:t})):n.createElement(b,l({ref:a},c))}));function b(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=m;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i[u]="string"==typeof e?e:o,l[1]=i;for(var d=2;d<r;d++)l[d]=t[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4097:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var n=t(7462),o=(t(7294),t(3905));const r={sidebar_position:4},l="Patrones de dise\xf1o de comportamiento",i={unversionedId:"tutorial-extras/comportamiento",id:"tutorial-extras/comportamiento",title:"Patrones de dise\xf1o de comportamiento",description:"\xbfQu\xe9 son los patrones de dise\xf1o de compartamiento?",source:"@site/docs/tutorial-extras/04-comportamiento.md",sourceDirName:"tutorial-extras",slug:"/tutorial-extras/comportamiento",permalink:"/solid-doc/docs/tutorial-extras/comportamiento",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/tutorial-extras/04-comportamiento.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Patrones de dise\xf1o estructurales",permalink:"/solid-doc/docs/tutorial-extras/Estructurales"}},s={},d=[{value:"\xbfQu\xe9 son los patrones de dise\xf1o de compartamiento?",id:"qu\xe9-son-los-patrones-de-dise\xf1o-de-compartamiento",level:2},{value:"Observer",id:"observer",level:3},{value:"Desventajas de Observer",id:"desventajas-de-observer",level:4},{value:"Test",id:"test",level:4},{value:"Strategy",id:"strategy",level:3},{value:"Desventajas de Strategy",id:"desventajas-de-strategy",level:4},{value:"Ejemplo de desarrollo",id:"ejemplo-de-desarrollo",level:5},{value:"Test",id:"test-1",level:4},{value:"Command",id:"command",level:3},{value:"Desventajas de Command",id:"desventajas-de-command",level:4},{value:"Ejemplo de desarrollo Command",id:"ejemplo-de-desarrollo-command",level:4},{value:"Test",id:"test-2",level:4},{value:"Chain of Responsibility",id:"chain-of-responsibility",level:3},{value:"Desventajas de <strong>Chain of Responsibility</strong>",id:"desventajas-de-chain-of-responsibility",level:4},{value:"Ejemplo de desarrollo de <strong>Chain of Responsibility</strong>",id:"ejemplo-de-desarrollo-de-chain-of-responsibility",level:4},{value:"Test",id:"test-3",level:4},{value:"Template Method",id:"template-method",level:3},{value:"Desventajas de Template Method",id:"desventajas-de-template-method",level:4},{value:"Ejemplo de desarrollo <strong>Template Method</strong>",id:"ejemplo-de-desarrollo-template-method",level:4},{value:"Test",id:"test-4",level:4},{value:"Iterator",id:"iterator",level:3},{value:"Desventajas de Iterator",id:"desventajas-de-iterator",level:4},{value:"Ejemplo de desarrollo Iterator",id:"ejemplo-de-desarrollo-iterator",level:4},{value:"Test",id:"test-5",level:4},{value:"State",id:"state",level:3},{value:"Desventajas del State",id:"desventajas-del-state",level:4},{value:"Ejemplo de desarrollo STate",id:"ejemplo-de-desarrollo-state",level:4},{value:"Test",id:"test-6",level:4},{value:"Mediator",id:"mediator",level:3}],c={toc:d},u="wrapper";function p(e){let{components:a,...t}=e;return(0,o.kt)(u,(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"patrones-de-dise\xf1o-de-comportamiento"},"Patrones de dise\xf1o de comportamiento"),(0,o.kt)("h2",{id:"qu\xe9-son-los-patrones-de-dise\xf1o-de-compartamiento"},"\xbfQu\xe9 son los patrones de dise\xf1o de compartamiento?"),(0,o.kt)("p",null,"Los patrones de comportamiento son un conjunto de patrones de dise\xf1o que se utilizan para resolver problemas relacionados con la comunicaci\xf3n y el comportamiento entre objetos en un sistema. Estos patrones se centran en la forma en que los objetos interact\xfaan entre s\xed y en c\xf3mo se distribuyen las responsabilidades entre ellos."),(0,o.kt)("p",null,"Algunos ejemplos de patrones de comportamiento son:"),(0,o.kt)("p",null,"Patr\xf3n Observer: Este patr\xf3n se utiliza cuando se necesita notificar a varios objetos sobre un cambio en el estado de un objeto. El patr\xf3n Observer define una relaci\xf3n de uno a muchos entre los objetos, de modo que cuando el objeto cambia su estado, todos los objetos registrados son notificados y actualizados autom\xe1ticamente."),(0,o.kt)("p",null,"Patr\xf3n Strategy: Este patr\xf3n se utiliza cuando se necesita cambiar din\xe1micamente el algoritmo utilizado por un objeto en tiempo de ejecuci\xf3n. El patr\xf3n Strategy permite encapsular diferentes algoritmos en clases separadas y permitir que el objeto utilice uno u otro en funci\xf3n de la situaci\xf3n."),(0,o.kt)("p",null,"Patr\xf3n Command: Este patr\xf3n se utiliza cuando se necesita encapsular una solicitud como un objeto, permitiendo la parametrizaci\xf3n de los clientes con diferentes solicitudes y la ejecuci\xf3n de diferentes comandos en diferentes momentos. El patr\xf3n Command separa la responsabilidad de solicitar una acci\xf3n de la implementaci\xf3n real de la acci\xf3n."),(0,o.kt)("p",null,"Patr\xf3n Chain of Responsibility: Este patr\xf3n se utiliza cuando se necesita procesar una solicitud a trav\xe9s de una cadena de objetos que tienen la posibilidad de manejarla. El patr\xf3n Chain of Responsibility establece una cadena de objetos, donde cada objeto tiene la oportunidad de manejar la solicitud o pasarla al siguiente objeto de la cadena."),(0,o.kt)("p",null,"Patr\xf3n Template Method: Este patr\xf3n se utiliza cuando se necesita definir un algoritmo en una clase base, pero permitir que las subclases proporcionen implementaciones espec\xedficas de algunos pasos. El patr\xf3n Template Method define una estructura de algoritmo en una clase base y permite que las subclases redefinan o extiendan partes espec\xedficas del algoritmo."),(0,o.kt)("p",null,"Patr\xf3n Interpreter: Este patr\xf3n se utiliza cuando se necesita interpretar y ejecutar un lenguaje de expresiones. El patr\xf3n Interpreter define una gram\xe1tica para el lenguaje de expresiones y proporciona una clase int\xe9rprete que utiliza la gram\xe1tica para interpretar y ejecutar las expresiones."),(0,o.kt)("p",null,"Estos son solo algunos ejemplos de patrones de comportamiento que se utilizan en el dise\xf1o de sistemas orientados a objetos. Cada patr\xf3n tiene sus propias ventajas y desventajas y debe evaluarse cuidadosamente antes de aplicarlo en una situaci\xf3n determinada."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Patr\xf3n de Comportamiento"),(0,o.kt)("th",{parentName:"tr",align:null},"Descripci\xf3n"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Observer"),(0,o.kt)("td",{parentName:"tr",align:null},"Define una relaci\xf3n uno a muchos entre objetos, de modo que cuando un objeto cambia su estado, todos los objetos registrados son notificados y actualizados autom\xe1ticamente.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Strategy"),(0,o.kt)("td",{parentName:"tr",align:null},"Permite cambiar din\xe1micamente el algoritmo utilizado por un objeto en tiempo de ejecuci\xf3n.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Command"),(0,o.kt)("td",{parentName:"tr",align:null},"Encapsula una solicitud como un objeto, permitiendo la parametrizaci\xf3n de los clientes con diferentes solicitudes y la ejecuci\xf3n de diferentes comandos en diferentes momentos.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Chain of Responsibility"),(0,o.kt)("td",{parentName:"tr",align:null},"Procesa una solicitud a trav\xe9s de una cadena de objetos que tienen la posibilidad de manejarla.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Template Method"),(0,o.kt)("td",{parentName:"tr",align:null},"Define una estructura de algoritmo en una clase base y permite que las subclases redefinan o extiendan partes espec\xedficas del algoritmo.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"State"),(0,o.kt)("td",{parentName:"tr",align:null},"Permite a un objeto cambiar su comportamiento cuando su estado interno cambia.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Iterator"),(0,o.kt)("td",{parentName:"tr",align:null},"Proporciona una forma de acceder secuencialmente a los elementos de una colecci\xf3n sin exponer su representaci\xf3n subyacente.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Mediator"),(0,o.kt)("td",{parentName:"tr",align:null},"Define un objeto que encapsula la forma en que los objetos interact\xfaan entre s\xed, promoviendo el bajo acoplamiento y la independencia entre ellos.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Memento"),(0,o.kt)("td",{parentName:"tr",align:null},"Permite capturar y restaurar el estado interno de un objeto sin violar el principio de encapsulamiento.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Visitor"),(0,o.kt)("td",{parentName:"tr",align:null},"Permite definir una nueva operaci\xf3n sin cambiar las clases de los objetos sobre los que opera.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Null Object"),(0,o.kt)("td",{parentName:"tr",align:null},'Provee un objeto "nulo" que act\xfaa como sustituto de otro objeto que no est\xe1 disponible o que no existe.')))),(0,o.kt)("h3",{id:"observer"},"Observer"),(0,o.kt)("p",null,"El patr\xf3n Observer es un patr\xf3n de dise\xf1o de comportamiento que se utiliza cuando se desea establecer una relaci\xf3n uno a muchos entre objetos. El patr\xf3n Observer define un objeto (llamado sujeto) que mantiene una lista de suscriptores (observadores) y notifica autom\xe1ticamente a todos los observadores cuando cambia su estado."),(0,o.kt)("p",null,"El patr\xf3n Observer consta de los siguientes elementos:"),(0,o.kt)("p",null,"Sujeto: Es el objeto que mantiene una lista de observadores y notifica autom\xe1ticamente a todos los observadores cuando su estado cambia.\nObservador: Es una interfaz que define el m\xe9todo de actualizaci\xf3n, que se llama cuando el sujeto notifica a los observadores sobre un cambio de estado.\nObservadores concretos: Son objetos que implementan la interfaz Observador y se registran para recibir notificaciones del sujeto.\nAqu\xed hay un ejemplo de c\xf3digo en PHP que ilustra c\xf3mo implementar el patr\xf3n Observer:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// Definir la interfaz Observador\ninterface Observador {\n    public function actualizar(Sujeto $sujeto);\n}\n\n// Definir la clase Sujeto\nclass Sujeto {\n    private $observadores = array();\n    private $estado;\n\n    public function agregarObservador(Observador $observador) {\n        $this->observadores[] = $observador;\n    }\n\n    public function eliminarObservador(Observador $observador) {\n        $index = array_search($observador, $this->observadores);\n        if ($index !== false) {\n            unset($this->observadores[$index]);\n        }\n    }\n\n    public function notificarObservadores() {\n        foreach ($this->observadores as $observador) {\n            $observador->actualizar($this);\n        }\n    }\n\n    public function setEstado($estado) {\n        $this->estado = $estado;\n        $this->notificarObservadores();\n    }\n\n    public function getEstado() {\n        return $this->estado;\n    }\n}\n\n// Definir una clase Observador concreta\nclass ObservadorConcreto implements Observador {\n    private $nombre;\n\n    public function __construct($nombre) {\n        $this->nombre = $nombre;\n    }\n\n    public function actualizar(Sujeto $sujeto) {\n        echo "Observador {$this->nombre} ha sido notificado. El nuevo estado del sujeto es: {$sujeto->getEstado()}<br>";\n    }\n}\n\n// Uso del patr\xf3n Observer\n$sujeto = new Sujeto();\n\n$observador1 = new ObservadorConcreto("Observador 1");\n$observador2 = new ObservadorConcreto("Observador 2");\n\n$sujeto->agregarObservador($observador1);\n$sujeto->agregarObservador($observador2);\n\n$sujeto->setEstado("estado 1");\n\n$sujeto->eliminarObservador($observador2);\n\n$sujeto->setEstado("estado 2");\n')),(0,o.kt)("p",null,"En este ejemplo, la clase ",(0,o.kt)("strong",{parentName:"p"},"Sujeto")," mantiene una lista de ",(0,o.kt)("strong",{parentName:"p"},"observadores")," y notifica a todos los observadores registrados cuando su estado cambia mediante el m\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"notificarObservadores()"),". Los observadores concretos, en este caso ",(0,o.kt)("strong",{parentName:"p"},"ObservadorConcreto"),", implementan la interfaz Observador y se registran en el sujeto mediante el m\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"agregarObservador()"),". Cuando el estado del sujeto cambia, los observadores son notificados autom\xe1ticamente y se les llama al m\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"actualizar()"),". En este m\xe9todo, los observadores concretos realizan las operaciones necesarias con la informaci\xf3n actualizada del sujeto."),(0,o.kt)("p",null,"En este ejemplo, se crean dos observadores concretos y se registran en el sujeto. Luego se cambia el estado del sujeto y se notifica autom\xe1ticamente a los observadores registrados. Despu\xe9s, se elimina uno de los observadores y se cambia el estado del sujeto nuevamente, pero solo se notifica al observador que sigue registrado."),(0,o.kt)("p",null,"Este ejemplo muestra c\xf3mo el patr\xf3n Observer se puede utilizar para implementar la comunicaci\xf3n entre objetos de una manera eficiente y flexible."),(0,o.kt)("h4",{id:"desventajas-de-observer"},"Desventajas de Observer"),(0,o.kt)("p",null,"Aunque el patr\xf3n Observer tiene muchas ventajas, tambi\xe9n tiene algunas desventajas que es importante tener en cuenta:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Acoplamiento excesivo: El patr\xf3n Observer puede llevar a un acoplamiento excesivo entre el sujeto y los observadores. Los observadores pueden depender demasiado del sujeto, lo que puede hacer que sea dif\xedcil reutilizarlos en otros contextos.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Actualizaciones innecesarias: A veces, los observadores pueden recibir actualizaciones innecesarias del sujeto, lo que puede hacer que el sistema sea menos eficiente. Esto puede ser especialmente problem\xe1tico si el sujeto tiene muchos observadores.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Orden de actualizaci\xf3n: El orden en que se actualizan los observadores puede ser importante en algunos casos. Si el orden no se maneja adecuadamente, puede llevar a errores o comportamientos inesperados en el sistema.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Complejidad: La implementaci\xf3n del patr\xf3n Observer puede ser compleja en algunos casos, especialmente si el sistema tiene muchos sujetos y observadores. Esto puede hacer que el c\xf3digo sea m\xe1s dif\xedcil de entender y mantener."))),(0,o.kt)("p",null,"Es importante tener en cuenta estas desventajas al decidir si el patr\xf3n Observer es apropiado para un sistema en particular. En algunos casos, el patr\xf3n Observer puede ser la mejor opci\xf3n, pero en otros casos, puede haber patrones m\xe1s apropiados o soluciones alternativas."),(0,o.kt)("h4",{id:"test"},"Test"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 es el patr\xf3n Observer?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Un patr\xf3n creacional."),(0,o.kt)("li",{parentName:"ul"},"b) Un patr\xf3n estructural."),(0,o.kt)("li",{parentName:"ul"},"c) Un patr\xf3n de comportamiento.")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfCu\xe1l es el prop\xf3sito del patr\xf3n Observer?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Permitir que los objetos cambien su comportamiento en tiempo de ejecuci\xf3n."),(0,o.kt)("li",{parentName:"ul"},"b) Permitir que los objetos creen otros objetos."),(0,o.kt)("li",{parentName:"ul"},"c) Permitir que los objetos notifiquen a otros objetos sobre cambios en su estado.")),(0,o.kt)("p",null,"3.",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"\xbfCu\xe1les son los elementos principales del patr\xf3n Observer?"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Sujeto, observador y mensaje."),(0,o.kt)("li",{parentName:"ul"},"b) Sujeto, observador y notificaci\xf3n."),(0,o.kt)("li",{parentName:"ul"},"c) Sujeto, observador y actualizaci\xf3n.")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 ventaja proporciona el patr\xf3n Observer?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Reduce el acoplamiento entre objetos."),(0,o.kt)("li",{parentName:"ul"},"b) Permite que los objetos creen otros objetos de manera flexible."),(0,o.kt)("li",{parentName:"ul"},"c) Aumenta la complejidad del c\xf3digo.")),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfCu\xe1l es una desventaja del patr\xf3n Observer?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Puede causar actualizaciones innecesarias."),(0,o.kt)("li",{parentName:"ul"},"b) No proporciona un mecanismo para que los objetos cambien su comportamiento en tiempo de ejecuci\xf3n."),(0,o.kt)("li",{parentName:"ul"},"c) No tiene elementos principales claramente definidos.")),(0,o.kt)("p",null,"Respuestas:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"c) Un patr\xf3n de comportamiento."),(0,o.kt)("li",{parentName:"ol"},"c) Permitir que los objetos notifiquen a otros objetos sobre cambios en su estado."),(0,o.kt)("li",{parentName:"ol"},"b) Sujeto, observador y notificaci\xf3n."),(0,o.kt)("li",{parentName:"ol"},"a) Reduce el acoplamiento entre objetos."),(0,o.kt)("li",{parentName:"ol"},"a) Puede causar actualizaciones innecesarias.")),(0,o.kt)("h3",{id:"strategy"},"Strategy"),(0,o.kt)("p",null,"El patr\xf3n de dise\xf1o Strategy es especialmente \xfatil cuando se trabaja con algoritmos que tienen diferentes variaciones o formas de implementaci\xf3n. En lugar de tener que codificar todas estas variaciones en una \xfanica clase, se puede separar la implementaci\xf3n del algoritmo en diferentes clases que implementan una interfaz com\xfan."),(0,o.kt)("p",null,"Esto permite que el cliente (el objeto que utiliza el algoritmo) pueda seleccionar din\xe1micamente qu\xe9 implementaci\xf3n de la estrategia utilizar en tiempo de ejecuci\xf3n, lo que proporciona una mayor flexibilidad en el dise\xf1o del software."),(0,o.kt)("p",null,"Por ejemplo, si se tiene una aplicaci\xf3n de comercio electr\xf3nico que necesita calcular los precios de env\xedo, se pueden implementar diferentes estrategias para el c\xe1lculo de los precios de env\xedo, como c\xe1lculo basado en peso, c\xe1lculo basado en distancia, o c\xe1lculo basado en tiempo de entrega. Cada estrategia se implementar\xeda en su propia clase que implementa la misma interfaz com\xfan, y el cliente (por ejemplo, el proceso de checkout) puede seleccionar la estrategia adecuada en tiempo de ejecuci\xf3n."),(0,o.kt)("p",null,"El patr\xf3n de dise\xf1o Strategy tambi\xe9n ayuda a mantener el principio de responsabilidad \xfanica, ya que cada clase de estrategia se centra en una \xfanica variaci\xf3n del algoritmo, lo que facilita la comprensi\xf3n, mantenimiento y extensi\xf3n del c\xf3digo."),(0,o.kt)("p",null,"En resumen, el patr\xf3n de dise\xf1o Strategy proporciona una forma flexible y escalable de implementar diferentes variaciones de un algoritmo en una aplicaci\xf3n, permitiendo que el cliente seleccione din\xe1micamente la estrategia adecuada en tiempo de ejecuci\xf3n."),(0,o.kt)("h4",{id:"desventajas-de-strategy"},"Desventajas de Strategy"),(0,o.kt)("p",null,"Aunque el patr\xf3n de dise\xf1o Strategy tiene varias ventajas, tambi\xe9n presenta algunas desventajas a considerar:"),(0,o.kt)("p",null,"Aumento de complejidad: la implementaci\xf3n del patr\xf3n Strategy puede aumentar la complejidad del c\xf3digo, ya que se requiere la creaci\xf3n de m\xfaltiples clases para implementar cada variaci\xf3n del algoritmo."),(0,o.kt)("p",null,"Aumento de consumo de memoria: dado que cada estrategia es una clase separada, la implementaci\xf3n del patr\xf3n Strategy puede aumentar el consumo de memoria del sistema."),(0,o.kt)("p",null,"Mayor dificultad de comprensi\xf3n: la implementaci\xf3n del patr\xf3n Strategy puede dificultar la comprensi\xf3n del c\xf3digo para desarrolladores que no est\xe1n familiarizados con el patr\xf3n."),(0,o.kt)("p",null,"Aumento de la cantidad de c\xf3digo: se requiere la creaci\xf3n de varias clases para implementar cada variaci\xf3n del algoritmo, lo que puede aumentar la cantidad de c\xf3digo en la aplicaci\xf3n."),(0,o.kt)("p",null,"Mayor dificultad para la creaci\xf3n de nuevas estrategias: la creaci\xf3n de nuevas estrategias puede ser m\xe1s dif\xedcil que la implementaci\xf3n de una \xfanica clase con un algoritmo, ya que se requiere la creaci\xf3n de una nueva clase que implemente la interfaz de la estrategia."),(0,o.kt)("p",null,"En general, el patr\xf3n de dise\xf1o Strategy puede ser una buena opci\xf3n en situaciones en las que se necesita flexibilidad para cambiar el comportamiento del sistema, pero se debe tener en cuenta que puede aumentar la complejidad y el consumo de recursos de la aplicaci\xf3n."),(0,o.kt)("h5",{id:"ejemplo-de-desarrollo"},"Ejemplo de desarrollo"),(0,o.kt)("p",null,"En este ejemplo, tendremos diferentes estrategias para calcular descuentos en funci\xf3n del tipo de cliente: cliente regular, cliente leal y cliente VIP."),(0,o.kt)("p",null,"Primero, crearemos la interfaz com\xfan para todas las estrategias:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"interface DiscountStrategy {\n    public function calculateDiscount($amount): float;\n}\n")),(0,o.kt)("p",null,"Luego, crearemos las implementaciones concretas de la estrategia, que son las diferentes formas en que se puede calcular el descuento."),(0,o.kt)("p",null,"php\nCopy code\nclass RegularCustomerDiscount implements DiscountStrategy {\npublic function calculateDiscount($amount): float {\n// Calcular descuento para cliente regular\nreturn $amount * 0.05;\n}\n}"),(0,o.kt)("p",null,"class LoyalCustomerDiscount implements DiscountStrategy {\npublic function calculateDiscount($amount): float {\n// Calcular descuento para cliente leal\nreturn $amount * 0.10;\n}\n}"),(0,o.kt)("p",null,"class VIPCustomerDiscount implements DiscountStrategy {\npublic function calculateDiscount($amount): float {\n// Calcular descuento para cliente VIP\nreturn $amount * 0.15;\n}\n}\nPor \xfaltimo, crearemos el contexto, que es el objeto que utilizar\xe1 una estrategia para calcular el descuento:"),(0,o.kt)("p",null,"php\nCopy code\nclass ShoppingCart {\nprivate $discountStrategy;"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"public function __construct(DiscountStrategy $discountStrategy) {\n    $this->discountStrategy = $discountStrategy;\n}\n\npublic function setDiscountStrategy(DiscountStrategy $discountStrategy) {\n    $this->discountStrategy = $discountStrategy;\n}\n\npublic function calculateDiscount($amount): float {\n    return $this->discountStrategy->calculateDiscount($amount);\n}\n")),(0,o.kt)("p",null,"}\nEn este ejemplo, el contexto es la clase ShoppingCart, que tiene una propiedad discountStrategy que apunta a una instancia de la estrategia seleccionada. La clase ShoppingCart tiene un m\xe9todo calculateDiscount que toma el monto total de la compra y utiliza la estrategia seleccionada para calcular el descuento."),(0,o.kt)("p",null,"Para utilizar este patr\xf3n, se puede crear una instancia de la clase ShoppingCart y establecer la estrategia de descuento deseada:"),(0,o.kt)("p",null,"php\nCopy code\n$amount = 100;\n$cart = new ShoppingCart(new RegularCustomerDiscount());\n$discount = $cart->calculateDiscount($amount);\nEn este ejemplo, se est\xe1 utilizando la estrategia RegularCustomerDiscount para calcular el descuento, pero se puede cambiar la estrategia din\xe1micamente en tiempo de ejecuci\xf3n utilizando el m\xe9todo setDiscountStrategy."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"class RegularCustomerDiscount implements DiscountStrategy {\n    public function calculateDiscount($amount): float {\n        // Calcular descuento para cliente regular\n        return $amount * 0.05;\n    }\n}\n\nclass LoyalCustomerDiscount implements DiscountStrategy {\n    public function calculateDiscount($amount): float {\n        // Calcular descuento para cliente leal\n        return $amount * 0.10;\n    }\n}\n\nclass VIPCustomerDiscount implements DiscountStrategy {\n    public function calculateDiscount($amount): float {\n        // Calcular descuento para cliente VIP\n        return $amount * 0.15;\n    }\n}\n")),(0,o.kt)("p",null,"Por \xfaltimo, crearemos el contexto, que es el objeto que utilizar\xe1 una estrategia para calcular el descuento:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"class ShoppingCart {\n    private $discountStrategy;\n    \n    public function __construct(DiscountStrategy $discountStrategy) {\n        $this->discountStrategy = $discountStrategy;\n    }\n    \n    public function setDiscountStrategy(DiscountStrategy $discountStrategy) {\n        $this->discountStrategy = $discountStrategy;\n    }\n    \n    public function calculateDiscount($amount): float {\n        return $this->discountStrategy->calculateDiscount($amount);\n    }\n}\n")),(0,o.kt)("p",null,"En este ejemplo, el contexto es la clase ShoppingCart, que tiene una propiedad discountStrategy que apunta a una instancia de la estrategia seleccionada. La clase ShoppingCart tiene un m\xe9todo calculateDiscount que toma el monto total de la compra y utiliza la estrategia seleccionada para calcular el descuento."),(0,o.kt)("p",null,"Para utilizar este patr\xf3n, se puede crear una instancia de la clase ShoppingCart y establecer la estrategia de descuento deseada:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"$amount = 100;\n$cart = new ShoppingCart(new RegularCustomerDiscount());\n$discount = $cart->calculateDiscount($amount);\n")),(0,o.kt)("p",null,"En este ejemplo, se est\xe1 utilizando la estrategia ",(0,o.kt)("strong",{parentName:"p"},"*RegularCustomerDiscount")," para calcular el descuento, pero se puede cambiar la estrategia din\xe1micamente en tiempo de ejecuci\xf3n utilizando el m\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"setDiscountStrategy.")),(0,o.kt)("h4",{id:"test-1"},"Test"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 problema resuelve el patr\xf3n de dise\xf1o Strategy?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Permite definir un conjunto de algoritmos y encapsular cada uno de ellos dentro de un objeto separado."),(0,o.kt)("li",{parentName:"ul"},"b) Proporciona una forma de ocultar la complejidad de un objeto detr\xe1s de una interfaz simple y consistente."),(0,o.kt)("li",{parentName:"ul"},"c) Permite crear objetos sin especificar la clase exacta que se va a utilizar."),(0,o.kt)("li",{parentName:"ul"},"Respuesta: a)")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfCu\xe1l es el principal beneficio de usar el patr\xf3n de dise\xf1o Strategy?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Proporciona una estructura clara y f\xe1cil de mantener."),(0,o.kt)("li",{parentName:"ul"},"b) Permite una mayor reutilizaci\xf3n de c\xf3digo."),(0,o.kt)("li",{parentName:"ul"},"c) Reduce la complejidad y aumenta la flexibilidad del c\xf3digo."),(0,o.kt)("li",{parentName:"ul"},"Respuesta: c)")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 elementos participan en el patr\xf3n de dise\xf1o Strategy?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Contexto, estrategias y clientes."),(0,o.kt)("li",{parentName:"ul"},"b) Contexto, estrategias y adaptadores."),(0,o.kt)("li",{parentName:"ul"},"c) Contexto, estrategias y observadores."),(0,o.kt)("li",{parentName:"ul"},"Respuesta: a)")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfCu\xe1l es la funci\xf3n de la interfaz en el patr\xf3n de dise\xf1o Strategy?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Define los m\xe9todos que ser\xe1n implementados por las diferentes estrategias."),(0,o.kt)("li",{parentName:"ul"},"b) Define los m\xe9todos que ser\xe1n utilizados por el cliente."),(0,o.kt)("li",{parentName:"ul"},"c) Define los m\xe9todos que ser\xe1n utilizados por el contexto."),(0,o.kt)("li",{parentName:"ul"},"Respuesta: a)")),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfCu\xe1ndo es apropiado utilizar el patr\xf3n de dise\xf1o Strategy?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Cuando se desea proporcionar m\xfaltiples variantes de un algoritmo o comportamiento."),(0,o.kt)("li",{parentName:"ul"},"b) Cuando se desea ocultar la complejidad de un objeto detr\xe1s de una interfaz simple y consistente."),(0,o.kt)("li",{parentName:"ul"},"c) Cuando se desea crear objetos sin especificar la clase exacta que se va a utilizar."),(0,o.kt)("li",{parentName:"ul"},"Respuesta: a)")),(0,o.kt)("h3",{id:"command"},"Command"),(0,o.kt)("p",null,"El patr\xf3n de dise\xf1o Command es un patr\xf3n de dise\xf1o de software que se utiliza para encapsular una solicitud como un objeto, lo que permite que se puedan parametrizar diferentes solicitudes, encolar o registrar solicitudes y apoyar operaciones reversibles. En este patr\xf3n, se separa la solicitud del objeto que la realiza y se encapsula la solicitud en un objeto de comando. El objeto de comando encapsula tanto la solicitud como su informaci\xf3n de contexto, y el objeto receptor, que es el responsable de llevar a cabo la operaci\xf3n, se invoca a trav\xe9s de una \xfanica interfaz com\xfan. Esto permite que se puedan encolar diferentes comandos, deshacer y rehacer las operaciones realizadas por el comando y proporciona una gran flexibilidad y extensibilidad al dise\xf1o."),(0,o.kt)("p",null,"El patr\xf3n Command se compone de cuatro componentes principales: el objeto receptor, que realiza la operaci\xf3n, el objeto comando, que encapsula la solicitud y su contexto, el invocador, que maneja los comandos y los ejecuta y el cliente, que crea los objetos comandos y los pasa al invocador para que los ejecute. Este patr\xf3n se utiliza a menudo en aplicaciones donde se necesitan operaciones reversibles, como editores de texto, sistemas de gesti\xf3n de transacciones y procesadores de comandos de voz."),(0,o.kt)("h4",{id:"desventajas-de-command"},"Desventajas de Command"),(0,o.kt)("p",null,"Si bien el patr\xf3n de dise\xf1o Command tiene varias ventajas, tambi\xe9n tiene algunas desventajas que se deben tener en cuenta al aplicar este patr\xf3n en un dise\xf1o de software:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Complejidad: El patr\xf3n Command puede aumentar la complejidad del c\xf3digo, ya que implica la creaci\xf3n de muchos objetos adicionales, lo que puede dificultar la comprensi\xf3n y el mantenimiento del c\xf3digo.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Sobrecarga de memoria: Debido a que se crean muchos objetos adicionales para implementar el patr\xf3n Command, puede haber una sobrecarga de memoria en el sistema, lo que puede tener un impacto en el rendimiento.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Dificultad para mantener el historial de comandos: Mantener el historial de comandos en una aplicaci\xf3n que utiliza el patr\xf3n Command puede ser dif\xedcil, especialmente si se trata de comandos complejos o si el historial es muy largo.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Problemas de seguridad: El patr\xf3n Command puede introducir problemas de seguridad, ya que los comandos pueden ser manipulados si no se toman medidas adecuadas para protegerlos."))),(0,o.kt)("p",null,"En general, el patr\xf3n Command puede ser \xfatil en muchos casos, pero es importante evaluar cuidadosamente las ventajas y desventajas antes de aplicarlo en un dise\xf1o de software espec\xedfico."),(0,o.kt)("h4",{id:"ejemplo-de-desarrollo-command"},"Ejemplo de desarrollo Command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// Interfaz para el objeto receptor\ninterface Editor {\n    public function escribir(string $texto): void;\n    public function borrar(): void;\n}\n\n// Clase que implementa la interfaz Receptor\nclass EditorConcreto implements Editor {\n    private $texto = \'\';\n\n    public function escribir(string $texto): void {\n        $this->texto .= $texto;\n        echo "Texto agregado: {$texto}\\n";\n    }\n\n    public function borrar(): void {\n        $borrado = substr($this->texto, -1);\n        $this->texto = substr($this->texto, 0, -1);\n        echo "Texto borrado: {$borrado}\\n";\n    }\n\n    public function getTexto(): string {\n        return $this->texto;\n    }\n}\n\n// Interfaz para el objeto comando\ninterface Comando {\n    public function ejecutar(): void;\n    public function deshacer(): void;\n}\n\n// Clase que implementa la interfaz Comando\nclass ComandoEscribir implements Comando {\n    private $editor;\n    private $texto;\n\n    public function __construct(Editor $editor, string $texto) {\n        $this->editor = $editor;\n        $this->texto = $texto;\n    }\n\n    public function ejecutar(): void {\n        $this->editor->escribir($this->texto);\n    }\n\n    public function deshacer(): void {\n        $textoBorrado = substr($this->texto, -strlen($this->texto));\n        $this->editor->borrar();\n        echo "Texto deshecho: {$textoBorrado}\\n";\n    }\n}\n\nclass ComandoBorrar implements Comando {\n    private $editor;\n\n    public function __construct(Editor $editor) {\n        $this->editor = $editor;\n    }\n\n    public function ejecutar(): void {\n        $this->editor->borrar();\n    }\n\n    public function deshacer(): void {\n        // No se puede deshacer el borrado\n    }\n}\n\n// Ejemplo de uso\n$editor = new EditorConcreto();\n$comando1 = new ComandoEscribir($editor, "Hola");\n$comando2 = new ComandoEscribir($editor, " mundo");\n$comando3 = new ComandoBorrar($editor);\n\n$invocador = new Invocador();\n\n$invocador->setComando($comando1);\n$invocador->ejecutarComando();\n\n$invocador->setComando($comando2);\n$invocador->ejecutarComando();\n\n$invocador->setComando($comando3);\n$invocador->ejecutarComando();\n\necho "Texto final: {$editor->getTexto()}\\n";\n$invocador->deshacerComando();\necho "Texto despu\xe9s de deshacer: {$editor->getTexto()}\\n";\n')),(0,o.kt)("p",null,"En este ejemplo, la interfaz ",(0,o.kt)("strong",{parentName:"p"},"Editor")," define las operaciones que se pueden realizar en un editor de texto, que en este caso se implementan en la clase ",(0,o.kt)("strong",{parentName:"p"},"EditorConcreto"),". La interfaz ",(0,o.kt)("strong",{parentName:"p"},"Comando")," define una operaci\xf3n que se puede ejecutar y deshacer, y se implementa en las clases ",(0,o.kt)("strong",{parentName:"p"},"ComandoEscribir")," y ",(0,o.kt)("strong",{parentName:"p"},"ComandoBorrar"),". La clase Invocador maneja los comandos y permite ejecutarlos y deshacerlos."),(0,o.kt)("p",null,'En este ejemplo se crean tres comandos: uno para escribir "Hola", otro para escribir "mundo" y otro para borrar el \xfaltimo caracter. Luego, se utilizan los comandos para escribir "Hola mundo" y borrar el \xfaltimo caracter, y se imprime el texto resultante. Finalmente, se deshace el \xfaltimo comando (el borrado) y se imprime el texto resultante despu\xe9s de deshacer.'),(0,o.kt)("p",null,"Este es solo un ejemplo b\xe1sico, pero el patr\xf3n Command se puede aplicar a una amplia variedad de situaciones en las que se requiere una separaci\xf3n clara entre el c\xf3digo que realiza la acci\xf3n y el c\xf3digo que la controla."),(0,o.kt)("h4",{id:"test-2"},"Test"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 elementos principales intervienen en el patr\xf3n Command?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) El receptor, el invocador y el cliente"),(0,o.kt)("li",{parentName:"ul"},"b) El receptor, el invocador y el comando"),(0,o.kt)("li",{parentName:"ul"},"c) El invocador, el cliente y el comando"),(0,o.kt)("li",{parentName:"ul"},"d) El cliente, el comando y el receptor")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 funci\xf3n tiene el objeto invocador en el patr\xf3n Command?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Ejecutar los comandos solicitados por el cliente"),(0,o.kt)("li",{parentName:"ul"},"b) Almacenar una lista de comandos ejecutados para poder deshacerlos"),(0,o.kt)("li",{parentName:"ul"},"c) Crear y destruir los objetos comando"),(0,o.kt)("li",{parentName:"ul"},"d) Realizar la acci\xf3n deseada por el cliente")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 funci\xf3n tiene el objeto comando en el patr\xf3n Command?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Realizar la acci\xf3n deseada por el cliente"),(0,o.kt)("li",{parentName:"ul"},"b) Almacenar una lista de comandos ejecutados para poder deshacerlos"),(0,o.kt)("li",{parentName:"ul"},"c) Crear y destruir los objetos comando"),(0,o.kt)("li",{parentName:"ul"},"d) Ejecutar los comandos solicitados por el cliente")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfEn qu\xe9 tipo de situaciones es \xfatil el patr\xf3n Command?")),"\n-a) Cuando se necesita encapsular la l\xf3gica de una acci\xf3n en un objeto independiente")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"b) Cuando se quiere aumentar la complejidad de un sistema"),(0,o.kt)("li",{parentName:"ul"},"c) Cuando se quiere evitar la creaci\xf3n de muchos objetos"),(0,o.kt)("li",{parentName:"ul"},"d) Cuando se quiere mejorar el rendimiento de una aplicaci\xf3n")),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 ventaja ofrece el patr\xf3n Command para la gesti\xf3n de errores?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Permite encapsular la l\xf3gica de recuperaci\xf3n de errores en el objeto comando"),(0,o.kt)("li",{parentName:"ul"},"b) Facilita la propagaci\xf3n de errores en la aplicaci\xf3n"),(0,o.kt)("li",{parentName:"ul"},"c) Reduce el n\xfamero de errores en la aplicaci\xf3n"),(0,o.kt)("li",{parentName:"ul"},"d) No tiene relaci\xf3n directa con la gesti\xf3n de errores")),(0,o.kt)("p",null,"Respuestas:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"b) El receptor, el invocador y el comando"),(0,o.kt)("li",{parentName:"ol"},"a) Ejecutar los comandos solicitados por el cliente"),(0,o.kt)("li",{parentName:"ol"},"a) Realizar la acci\xf3n deseada por el cliente"),(0,o.kt)("li",{parentName:"ol"},"a) Cuando se necesita encapsular la l\xf3gica de una acci\xf3n en un objeto independiente"),(0,o.kt)("li",{parentName:"ol"},"a) Permite encapsular la l\xf3gica de recuperaci\xf3n de errores en el objeto comando")),(0,o.kt)("h3",{id:"chain-of-responsibility"},"Chain of Responsibility"),(0,o.kt)("p",null,"El patr\xf3n de dise\xf1o Chain of Responsibility, o Cadena de Responsabilidad en espa\xf1ol, es un patr\xf3n comportamental que permite construir una cadena de objetos que se encargan de manejar una petici\xf3n en secuencia. Cada objeto de la cadena tiene la posibilidad de manejar la petici\xf3n o de pasarla al siguiente objeto de la cadena."),(0,o.kt)("p",null,"De esta manera, se logra desacoplar el objeto que genera la petici\xf3n del objeto que la maneja, permitiendo que diferentes objetos puedan manejar la petici\xf3n de manera independiente y, al mismo tiempo, evitando que el objeto que genera la petici\xf3n tenga que conocer los detalles de su manejo."),(0,o.kt)("p",null,"El patr\xf3n se compone de tres elementos principales:"),(0,o.kt)("p",null,"El Cliente (Client): es el objeto que genera la petici\xf3n y la env\xeda a la cadena de objetos.\nEl Manejador Abstracto (Handler): es una interfaz o clase abstracta que define el m\xe9todo para manejar la petici\xf3n y para pasarla al siguiente objeto de la cadena.\nEl Manejador Concreto (Concrete Handler): es la implementaci\xf3n espec\xedfica del Manejador Abstracto que se encarga de manejar la petici\xf3n o de pasarla al siguiente objeto de la cadena.\nAlgunos ejemplos de uso com\xfan del patr\xf3n Chain of Responsibility incluyen el manejo de solicitudes de autenticaci\xf3n en una aplicaci\xf3n web o el manejo de excepciones en una aplicaci\xf3n."),(0,o.kt)("h4",{id:"desventajas-de-chain-of-responsibility"},"Desventajas de ",(0,o.kt)("strong",{parentName:"h4"},"Chain of Responsibility")),(0,o.kt)("p",null,"Aunque el patr\xf3n de dise\xf1o Chain of Responsibility presenta ventajas como la flexibilidad y el desacoplamiento de objetos, tambi\xe9n puede tener algunas desventajas, entre las cuales se pueden mencionar:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Complejidad: La creaci\xf3n de una cadena de objetos puede llevar a una estructura compleja que puede ser dif\xedcil de entender y mantener.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Rendimiento: Debido a que cada objeto de la cadena tiene que ser consultado para manejar la petici\xf3n, puede haber una disminuci\xf3n en el rendimiento de la aplicaci\xf3n.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Posible p\xe9rdida de la petici\xf3n: Si no se establece correctamente la cadena de responsabilidad, puede ocurrir que la petici\xf3n sea pasada de un objeto a otro sin ser manejada adecuadamente, lo que podr\xeda resultar en una p\xe9rdida de la petici\xf3n.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Dificultad para identificar el Manejador Concreto: En algunos casos, puede ser dif\xedcil identificar qu\xe9 objeto de la cadena es responsable de manejar una petici\xf3n espec\xedfica."))),(0,o.kt)("p",null,"Es importante tener en cuenta que estas desventajas no siempre son aplicables a todas las situaciones y que el uso del patr\xf3n Chain of Responsibility depender\xe1 del contexto espec\xedfico de la aplicaci\xf3n y de las necesidades del sistema."),(0,o.kt)("h4",{id:"ejemplo-de-desarrollo-de-chain-of-responsibility"},"Ejemplo de desarrollo de ",(0,o.kt)("strong",{parentName:"h4"},"Chain of Responsibility")),(0,o.kt)("p",null,"Por supuesto, a continuaci\xf3n te mostrar\xe9 un ejemplo de implementaci\xf3n del patr\xf3n Chain of Responsibility en PHP."),(0,o.kt)("p",null,"Supongamos que queremos manejar diferentes tipos de solicitudes de soporte t\xe9cnico (por ejemplo, problemas de hardware o software) y que cada solicitud debe ser manejada por un equipo diferente dentro de nuestra organizaci\xf3n. Utilizaremos el patr\xf3n Chain of Responsibility para delegar la solicitud al equipo correspondiente."),(0,o.kt)("p",null,"Primero, crearemos la interfaz Manejador (Handler) que define el m\xe9todo para manejar la solicitud y pasarla al siguiente manejador en la cadena:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"interface Manejador {\n    public function manejarSolicitud($tipoSolicitud);\n    public function setSiguiente(Manejador $manejador);\n}\n")),(0,o.kt)("p",null,"Luego, crearemos la clase AbstractaEquipo (AbstractEquipo) que implementa la interfaz Manejador y define el siguiente manejador en la cadena:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"abstract class AbstractEquipo implements Manejador {\n    protected $siguienteManejador;\n    \n    public function setSiguiente(Manejador $manejador) {\n        $this->siguienteManejador = $manejador;\n    }\n    \n    public function manejarSolicitud($tipoSolicitud) {\n        if ($this->siguienteManejador != null) {\n            $this->siguienteManejador->manejarSolicitud($tipoSolicitud);\n        }\n    }\n}\n")),(0,o.kt)("p",null,"A continuaci\xf3n, crearemos las clases EquipoHardware (HardwareTeam) y EquipoSoftware (SoftwareTeam) que extienden la clase AbstractEquipo y manejan las solicitudes correspondientes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"class EquipoHardware extends AbstractEquipo {\n    public function manejarSolicitud($tipoSolicitud) {\n        if ($tipoSolicitud == 'hardware') {\n            echo \"El equipo de hardware se encargar\xe1 de su solicitud.\\n\";\n        } else {\n            parent::manejarSolicitud($tipoSolicitud);\n        }\n    }\n}\n\nclass EquipoSoftware extends AbstractEquipo {\n    public function manejarSolicitud($tipoSolicitud) {\n        if ($tipoSolicitud == 'software') {\n            echo \"El equipo de software se encargar\xe1 de su solicitud.\\n\";\n        } else {\n            parent::manejarSolicitud($tipoSolicitud);\n        }\n    }\n}\n")),(0,o.kt)("p",null,"Finalmente, creamos el Cliente (Client) que enviar\xe1 la solicitud a la cadena de manejadores:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"class Cliente {\n    public function enviarSolicitud($tipoSolicitud) {\n        $equipoHardware = new EquipoHardware();\n        $equipoSoftware = new EquipoSoftware();\n        \n        $equipoHardware->setSiguiente($equipoSoftware);\n        \n        $equipoHardware->manejarSolicitud($tipoSolicitud);\n    }\n}\n\n// Ejemplo de uso\n$cliente = new Cliente();\n$cliente->enviarSolicitud('hardware');\n$cliente->enviarSolicitud('software');\n")),(0,o.kt)("p",null,"En este ejemplo, el Cliente env\xeda la solicitud al equipo de hardware, y si este no puede manejarla, la pasa al equipo de software. Si ning\xfan equipo puede manejar la solicitud, se imprimir\xe1 un mensaje de error."),(0,o.kt)("h4",{id:"test-3"},"Test"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfCu\xe1l es el prop\xf3sito principal del patr\xf3n Chain of Responsibility?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Manejar solicitudes en una cadena de objetos."),(0,o.kt)("li",{parentName:"ul"},"b) Simplificar la l\xf3gica de negocio en una aplicaci\xf3n."),(0,o.kt)("li",{parentName:"ul"},"c) Mejorar la eficiencia del c\xf3digo."),(0,o.kt)("li",{parentName:"ul"},"d) Reducir la cantidad de clases necesarias en una aplicaci\xf3n.")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 es un manejador en el patr\xf3n Chain of Responsibility?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Una interfaz que define c\xf3mo se manejan las solicitudes."),(0,o.kt)("li",{parentName:"ul"},"b) Una clase abstracta que implementa la interfaz Manejador."),(0,o.kt)("li",{parentName:"ul"},"c) Una clase concreta que maneja una solicitud espec\xedfica."),(0,o.kt)("li",{parentName:"ul"},"d) Un objeto que se encarga de crear la cadena de manejadores.")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 ventaja ofrece el patr\xf3n Chain of Responsibility en comparaci\xf3n con un enfoque basado en condicionales?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Mejora la legibilidad del c\xf3digo."),(0,o.kt)("li",{parentName:"ul"},"b) Simplifica la implementaci\xf3n de la l\xf3gica de negocio."),(0,o.kt)("li",{parentName:"ul"},"c) Reduce el acoplamiento entre los objetos de la aplicaci\xf3n."),(0,o.kt)("li",{parentName:"ul"},"d) Aumenta la eficiencia del c\xf3digo.")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfC\xf3mo se establece la cadena de manejadores en el patr\xf3n Chain of Responsibility?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Mediante un constructor en cada clase de manejador."),(0,o.kt)("li",{parentName:"ul"},"b) Mediante un m\xe9todo setSiguiente() en la interfaz Manejador."),(0,o.kt)("li",{parentName:"ul"},"c) Mediante un m\xe9todo setSiguiente() en la clase abstracta AbstractEquipo."),(0,o.kt)("li",{parentName:"ul"},"d) Mediante un m\xe9todo setSiguiente() en cada clase de manejador.")),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 desventaja tiene el patr\xf3n Chain of Responsibility?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Aumenta la complejidad de la aplicaci\xf3n al introducir una cadena de objetos."),(0,o.kt)("li",{parentName:"ul"},"b) Reduce la flexibilidad al limitar la cantidad de manejadores en la cadena."),(0,o.kt)("li",{parentName:"ul"},"c) Puede aumentar el tiempo de ejecuci\xf3n al recorrer la cadena de manejadores."),(0,o.kt)("li",{parentName:"ul"},"d) No se puede utilizar en situaciones en las que cada solicitud debe ser manejada por un objeto diferente.")),(0,o.kt)("p",null,"Respuestas"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"a) Manejar solicitudes en una cadena de objetos."),(0,o.kt)("li",{parentName:"ol"},"c) Una clase concreta que maneja una solicitud espec\xedfica."),(0,o.kt)("li",{parentName:"ol"},"c) Reduce el acoplamiento entre los objetos de la aplicaci\xf3n."),(0,o.kt)("li",{parentName:"ol"},"d) Mediante un m\xe9todo setSiguiente() en cada clase de manejador."),(0,o.kt)("li",{parentName:"ol"},"c) Puede aumentar el tiempo de ejecuci\xf3n al recorrer la cadena de manejadores.")),(0,o.kt)("h3",{id:"template-method"},"Template Method"),(0,o.kt)("p",null,"El patr\xf3n de dise\xf1o Template Method es un patr\xf3n de comportamiento que define una estructura para un algoritmo en una clase base, delegando algunos pasos del algoritmo a las subclases. En resumen, el patr\xf3n Template Method se utiliza cuando se quiere definir el esqueleto de un algoritmo, pero permitiendo que las subclases proporcionen algunos de los detalles espec\xedficos."),(0,o.kt)("p",null,"Por ejemplo, supongamos que tenemos una clase base que representa un proceso de fabricaci\xf3n de un producto. La clase base puede definir el esqueleto de la fabricaci\xf3n del producto, pero delegar algunas etapas espec\xedficas a las subclases, como la selecci\xf3n de materiales, el corte y la uni\xf3n de las piezas, y la pintura."),(0,o.kt)("p",null,"De esta manera, las subclases pueden proporcionar su propia implementaci\xf3n para cada paso espec\xedfico, mientras que la clase base garantiza que se siga el mismo proceso general para cada producto que se fabrique."),(0,o.kt)("p",null,"El patr\xf3n Template Method tiene varias ventajas, como la facilidad de extender la funcionalidad del algoritmo, la capacidad de proporcionar una estructura coherente para las clases que lo utilizan, y la reducci\xf3n de la duplicaci\xf3n de c\xf3digo."),(0,o.kt)("p",null,"Sin embargo, tambi\xe9n tiene algunas desventajas, como la complejidad a\xf1adida a la estructura del c\xf3digo y la necesidad de que las subclases sigan el mismo esquema de implementaci\xf3n para cada paso del algoritmo."),(0,o.kt)("h4",{id:"desventajas-de-template-method"},"Desventajas de Template Method"),(0,o.kt)("p",null,"Aunque el patr\xf3n Template Method puede ser muy \xfatil en ciertos casos, tambi\xe9n tiene algunas desventajas a considerar:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Rigidez en la estructura: el patr\xf3n Template Method define una estructura fija para los pasos de un algoritmo. Si se necesita agregar o cambiar alg\xfan paso en el futuro, puede ser necesario modificar la clase base y todas sus subclases, lo que puede ser costoso y propenso a errores.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Sobrecarga de la clase base: si se tienen muchas subclases que heredan de la clase base, esta puede volverse demasiado grande y dif\xedcil de entender y mantener.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Dificultad para entender el flujo de ejecuci\xf3n: al delegar la implementaci\xf3n de los pasos espec\xedficos a las subclases, el flujo de ejecuci\xf3n puede ser dif\xedcil de entender, especialmente si hay muchas subclases diferentes.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Falta de flexibilidad en la implementaci\xf3n: debido a que el patr\xf3n Template Method define una estructura fija, puede ser dif\xedcil adaptarlo a situaciones en las que se requiere una mayor flexibilidad en la implementaci\xf3n. En estos casos, puede ser necesario utilizar otro patr\xf3n de dise\xf1o o estrategias diferentes."))),(0,o.kt)("h4",{id:"ejemplo-de-desarrollo-template-method"},"Ejemplo de desarrollo ",(0,o.kt)("strong",{parentName:"h4"},"Template Method")),(0,o.kt)("p",null,'Supongamos que tenemos una clase base "Bebida" que representa una bebida gen\xe9rica y dos subclases "Cafe" y "Te" que representan bebidas espec\xedficas. La clase Bebida define el m\xe9todo template "preparar()", que contiene los pasos generales para preparar una bebida. Las subclases Cafe y Te proporcionan sus propias implementaciones para los pasos espec\xedficos de preparaci\xf3n.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'abstract class Bebida {\n    public function preparar() {\n        $this->calentarAgua();\n        $this->ponerIngredientes();\n        $this->servirEnTaza();\n    }\n\n    abstract protected function ponerIngredientes();\n\n    protected function calentarAgua() {\n        echo "Calentando agua...\\n";\n    }\n\n    protected function servirEnTaza() {\n        echo "Sirviendo en taza...\\n";\n    }\n}\n\nclass Cafe extends Bebida {\n    protected function ponerIngredientes() {\n        echo "A\xf1adiendo cafe...\\n";\n    }\n}\n\nclass Te extends Bebida {\n    protected function ponerIngredientes() {\n        echo "A\xf1adiendo te...\\n";\n    }\n}\n')),(0,o.kt)("p",null,'En este ejemplo, la clase Bebida define el m\xe9todo "preparar()" como un m\xe9todo template que contiene los pasos generales para preparar una bebida. Los pasos generales incluyen calentar el agua, poner los ingredientes y servir en una taza.'),(0,o.kt)("p",null,'Las subclases Cafe y Te proporcionan sus propias implementaciones para el m\xe9todo "ponerIngredientes()", que es un paso espec\xedfico de la preparaci\xf3n. En el caso del Cafe, el paso es a\xf1adir cafe, mientras que en el caso del Te, el paso es a\xf1adir te.'),(0,o.kt)("p",null,"De esta manera, la clase base Bebida define el esqueleto general del proceso de preparaci\xf3n de una bebida, pero delega los detalles espec\xedficos de cada bebida a las subclases."),(0,o.kt)("h4",{id:"test-4"},"Test"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfCu\xe1l es la finalidad del patr\xf3n de dise\xf1o Template Method?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"a) Definir la estructura general de un algoritmo en una clase base y permitir que las subclases implementen los pasos espec\xedficos.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"b) Permitir la comunicaci\xf3n entre objetos sin acoplarlos de forma directa.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"c) Definir un mecanismo para responder a eventos en un sistema.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"d) Proporcionar una interfaz unificada para un conjunto de interfaces en un subsistema.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Respuesta: a) Definir la estructura general de un algoritmo en una clase base y permitir que las subclases implementen los pasos espec\xedficos."))),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"*\xbfQu\xe9 m\xe9todo es definido en la clase base del patr\xf3n Template Method para definir la estructura general del algoritmo?"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"a) Abstract Method")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"b) Concrete Method")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"c) Template Method")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"d) Factory Method")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Respuesta: c) Template Method"))),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 ventaja ofrece el patr\xf3n Template Method al permitir que las subclases implementen los pasos espec\xedficos?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"a) Facilita la propagaci\xf3n de errores en la aplicaci\xf3n.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"b) Reduce el n\xfamero de errores en la aplicaci\xf3n.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"c) Mejora el rendimiento de la aplicaci\xf3n.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"d) Proporciona mayor flexibilidad en la implementaci\xf3n del algoritmo.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Respuesta: d) Proporciona mayor flexibilidad en la implementaci\xf3n del algoritmo."))),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 desventaja tiene el patr\xf3n Template Method relacionada con la rigidez en la estructura del algoritmo?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"a) Dificultad para entender el flujo de ejecuci\xf3n.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"b) Falta de flexibilidad en la implementaci\xf3n.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"c) Sobrecarga de la clase base.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"d) Ninguna de las anteriores.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Respuesta: b) Falta de flexibilidad en la implementaci\xf3n."))),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 patr\xf3n de dise\xf1o es similar al patr\xf3n Template Method, pero utiliza una estructura de colaboraci\xf3n de objetos en lugar de una estructura jer\xe1rquica de clases?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"a) Strategy")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"b) Facade")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"c) Adapter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"d) Observer")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Respuesta: a) Strategy."))),(0,o.kt)("h3",{id:"iterator"},"Iterator"),(0,o.kt)("p",null,"El patr\xf3n de dise\xf1o Iterator es un patr\xf3n de dise\xf1o de comportamiento que se utiliza para recorrer colecciones de objetos de manera secuencial, sin exponer los detalles de implementaci\xf3n de la colecci\xf3n subyacente. El patr\xf3n Iterator permite que los clientes recorran una colecci\xf3n de objetos sin conocer la estructura interna de la colecci\xf3n."),(0,o.kt)("p",null,"El patr\xf3n Iterator se compone de dos elementos principales: el iterador y la colecci\xf3n. El iterador es un objeto que proporciona un m\xe9todo para acceder a los elementos de la colecci\xf3n de forma secuencial. La colecci\xf3n es un objeto que contiene una serie de elementos, y que proporciona un m\xe9todo para obtener un iterador que se puede utilizar para recorrer los elementos de la colecci\xf3n."),(0,o.kt)("p",null,"La ventaja principal de utilizar el patr\xf3n Iterator es que permite recorrer colecciones de objetos sin exponer la estructura interna de la colecci\xf3n, lo que facilita la creaci\xf3n de c\xf3digo modular y reutilizable. Adem\xe1s, el patr\xf3n Iterator puede mejorar el rendimiento de la aplicaci\xf3n, ya que permite que los elementos de la colecci\xf3n se recorran de manera eficiente."),(0,o.kt)("h4",{id:"desventajas-de-iterator"},"Desventajas de Iterator"),(0,o.kt)("p",null,"Aunque el patr\xf3n de dise\xf1o Iterator tiene muchas ventajas, tambi\xe9n tiene algunas desventajas que se deben considerar al decidir si utilizarlo en una aplicaci\xf3n en particular. A continuaci\xf3n, se describen algunas de las desventajas m\xe1s importantes del patr\xf3n Iterator:"),(0,o.kt)("p",null,"Sobrecarga de c\xf3digo: El patr\xf3n Iterator puede aumentar la cantidad de c\xf3digo necesario para implementar una colecci\xf3n y su iterador, lo que puede hacer que el c\xf3digo sea m\xe1s dif\xedcil de mantener y m\xe1s propenso a errores."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"P\xe9rdida de eficiencia: En algunos casos, el uso del patr\xf3n Iterator puede introducir una sobrecarga de rendimiento debido al uso de objetos adicionales y la necesidad de iterar sobre una colecci\xf3n mediante un objeto en lugar de acceder directamente a los elementos.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Limitaciones de la interfaz Iterator: La interfaz Iterator define un conjunto limitado de m\xe9todos que deben implementarse para iterar sobre una colecci\xf3n, lo que puede limitar la flexibilidad y la capacidad de personalizaci\xf3n del iterador.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Problemas de concurrencia: El patr\xf3n Iterator no proporciona una soluci\xf3n integrada para problemas de concurrencia, como el acceso simult\xe1neo a una colecci\xf3n por m\xfaltiples hilos."))),(0,o.kt)("p",null,"En resumen, el patr\xf3n Iterator puede ser una herramienta \xfatil para recorrer colecciones de objetos de manera secuencial y modular, pero tambi\xe9n presenta algunas desventajas que deben tenerse en cuenta al decidir si utilizarlo en una aplicaci\xf3n en particular. Es importante evaluar cuidadosamente las ventajas y desventajas del patr\xf3n Iterator antes de decidir si utilizarlo en un proyecto espec\xedfico."),(0,o.kt)("h4",{id:"ejemplo-de-desarrollo-iterator"},"Ejemplo de desarrollo Iterator"),(0,o.kt)("p",null,"Un ejemplo de implementaci\xf3n del patr\xf3n Iterator en PHP podr\xeda ser el siguiente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"class Coleccion implements \\IteratorAggregate\n{\n    private $elementos = array();\n    \n    public function addElemento($elemento)\n    {\n        $this->elementos[] = $elemento;\n    }\n    \n    public function getIterator()\n    {\n        return new Iterador($this->elementos);\n    }\n}\n\nclass Iterador implements \\Iterator\n{\n    private $elementos = array();\n    private $indice = 0;\n    \n    public function __construct($elementos)\n    {\n        $this->elementos = $elementos;\n    }\n    \n    public function current()\n    {\n        return $this->elementos[$this->indice];\n    }\n    \n    public function key()\n    {\n        return $this->indice;\n    }\n    \n    public function next()\n    {\n        $this->indice++;\n    }\n    \n    public function rewind()\n    {\n        $this->indice = 0;\n    }\n    \n    public function valid()\n    {\n        return isset($this->elementos[$this->indice]);\n    }\n}\n")),(0,o.kt)("p",null,"En este ejemplo, la clase ",(0,o.kt)("strong",{parentName:"p"},"Coleccion")," es una colecci\xf3n de elementos y se implementa la interfaz IteratorAggregate, que define un m\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"getIterator()")," que devuelve un objeto Iterador. La clase Iterador es el objeto que recorre la colecci\xf3n y se implementa la interfaz Iterator, que define los m\xe9todos ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"current(), key(), next(), rewind() y valid()")),"."),(0,o.kt)("p",null,"Para utilizar el patr\xf3n Iterator, se puede crear una instancia de la clase Coleccion y agregar elementos a la colecci\xf3n mediante el m\xe9todo addElemento(). Luego, se puede recorrer la colecci\xf3n utilizando un bucle foreach que utiliza el iterador devuelto por el m\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"getIterator()"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'$coleccion = new Coleccion();\n$coleccion->addElemento("Elemento 1");\n$coleccion->addElemento("Elemento 2");\n$coleccion->addElemento("Elemento 3");\n\nforeach ($coleccion as $indice => $elemento) {\n    echo "Elemento $indice: $elemento\\n";\n}\n')),(0,o.kt)("p",null,"Este c\xf3digo recorre la colecci\xf3n de elementos utilizando un bucle foreach y el iterador proporcionado por la clase Coleccion. El resultado de la ejecuci\xf3n ser\xeda:"),(0,o.kt)("h4",{id:"test-5"},"Test"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 es el patr\xf3n de dise\xf1o Iterator?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Un patr\xf3n de dise\xf1o de creaci\xf3n"),(0,o.kt)("li",{parentName:"ul"},"b) Un patr\xf3n de dise\xf1o de comportamiento"),(0,o.kt)("li",{parentName:"ul"},"c) Un patr\xf3n de dise\xf1o estructural"),(0,o.kt)("li",{parentName:"ul"},"d) Un patr\xf3n de dise\xf1o arquitect\xf3nico")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 interfaz define el patr\xf3n Iterator?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Iterator"),(0,o.kt)("li",{parentName:"ul"},"b) Collection"),(0,o.kt)("li",{parentName:"ul"},"c) Aggregator"),(0,o.kt)("li",{parentName:"ul"},"d) Element")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 clase implementa el m\xe9todo getIterator() en el patr\xf3n Iterator?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) La clase Iterator"),(0,o.kt)("li",{parentName:"ul"},"b) La clase Collection"),(0,o.kt)("li",{parentName:"ul"},"c) La clase Aggregator"),(0,o.kt)("li",{parentName:"ul"},"d) Todas las anteriores")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfCu\xe1l es una ventaja del patr\xf3n Iterator?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Mejora el rendimiento de la aplicaci\xf3n"),(0,o.kt)("li",{parentName:"ul"},"b) Facilita la creaci\xf3n de c\xf3digo modular y reutilizable"),(0,o.kt)("li",{parentName:"ul"},"c) Permite recorrer colecciones sin exponer la estructura interna de la colecci\xf3n"),(0,o.kt)("li",{parentName:"ul"},"d) Todas las anteriores")),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfCu\xe1l es una desventaja del patr\xf3n Iterator?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Puede introducir una sobrecarga de rendimiento"),(0,o.kt)("li",{parentName:"ul"},"b) Limita la flexibilidad y la capacidad de personalizaci\xf3n del iterador"),(0,o.kt)("li",{parentName:"ul"},"c) Requiere una cantidad adicional de c\xf3digo para implementar una colecci\xf3n y su iterador"),(0,o.kt)("li",{parentName:"ul"},"d) Todas las anteriores")),(0,o.kt)("p",null,"Respuestas:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"b) Un patr\xf3n de dise\xf1o de comportamiento"),(0,o.kt)("li",{parentName:"ol"},"a) Iterator"),(0,o.kt)("li",{parentName:"ol"},"b) La clase Collection"),(0,o.kt)("li",{parentName:"ol"},"d) Todas las anteriores"),(0,o.kt)("li",{parentName:"ol"},"d) Todas las anteriores")),(0,o.kt)("h3",{id:"state"},"State"),(0,o.kt)("p",null,"El patr\xf3n de dise\xf1o State es un patr\xf3n de comportamiento que permite a un objeto alterar su comportamiento cuando su estado interno cambia. Este patr\xf3n est\xe1 dise\xf1ado para separar la l\xf3gica de estado de un objeto de su comportamiento, de manera que el objeto pueda cambiar su comportamiento en funci\xf3n de su estado interno sin necesidad de cambiar su clase."),(0,o.kt)("p",null,"El patr\xf3n State se compone de dos elementos principales: el contexto y los estados. El contexto es el objeto que tiene un estado interno que puede cambiar, y los estados son objetos que definen el comportamiento del contexto en funci\xf3n de su estado interno."),(0,o.kt)("p",null,"El contexto tiene una referencia al estado actual, que puede cambiar en funci\xf3n de eventos o acciones externas. Cuando el estado interno del contexto cambia, el contexto cambia su comportamiento y delega el comportamiento espec\xedfico al objeto de estado correspondiente."),(0,o.kt)("p",null,'Un ejemplo de implementaci\xf3n del patr\xf3n State podr\xeda ser un reproductor de audio con diferentes estados, como "reproduciendo", "pausado" o "detenido". Cada estado define su propio comportamiento para el reproductor de audio, y el reproductor cambia su comportamiento en funci\xf3n del estado actual.'),(0,o.kt)("p",null,"Aqu\xed te dejo un ejemplo de implementaci\xf3n del patr\xf3n State en JavaScript para un reproductor de audio:"),(0,o.kt)("h4",{id:"desventajas-del-state"},"Desventajas del State"),(0,o.kt)("p",null,"Aunque el patr\xf3n de dise\xf1o State ofrece muchos beneficios, como una mejor organizaci\xf3n y modularidad del c\xf3digo y una mayor flexibilidad al cambiar el comportamiento de un objeto en funci\xf3n de su estado interno, tambi\xe9n tiene algunas desventajas:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Aumento de la complejidad: El patr\xf3n State introduce m\xe1s clases y aumenta la complejidad del c\xf3digo, lo que puede dificultar su mantenimiento y comprensi\xf3n.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Aumento del acoplamiento: El patr\xf3n State puede aumentar el acoplamiento entre el contexto y los objetos de estado, lo que puede dificultar la sustituci\xf3n de un objeto de estado por otro.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Dificultad para implementar nuevos estados: La adici\xf3n de nuevos estados puede ser complicada, especialmente si requieren un comportamiento completamente diferente al de los estados existentes.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Requiere una buena comprensi\xf3n del dominio: El patr\xf3n State requiere una buena comprensi\xf3n del dominio y del comportamiento del objeto en diferentes estados para dise\xf1ar los objetos de estado adecuados y definir el comportamiento adecuado para cada estado."))),(0,o.kt)("p",null,"En general, el patr\xf3n State es una buena elecci\xf3n cuando se trabaja con objetos que tienen diferentes comportamientos en funci\xf3n de su estado interno, pero es importante evaluar cuidadosamente las ventajas y desventajas de este patr\xf3n antes de decidir si es la mejor opci\xf3n para un proyecto espec\xedfico."),(0,o.kt)("h4",{id:"ejemplo-de-desarrollo-state"},"Ejemplo de desarrollo STate"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'interface AudioState {\n    public function play(AudioPlayer $player);\n    public function pause(AudioPlayer $player);\n    public function stop(AudioPlayer $player);\n}\n\nclass AudioPlayer {\n    private $state;\n\n    public function __construct(AudioState $state) {\n        $this->state = $state;\n    }\n\n    public function setState(AudioState $state) {\n        $this->state = $state;\n    }\n\n    public function play() {\n        $this->state->play($this);\n    }\n\n    public function pause() {\n        $this->state->pause($this);\n    }\n\n    public function stop() {\n        $this->state->stop($this);\n    }\n}\n\nclass PlayingState implements AudioState {\n    public function play(AudioPlayer $player) {\n        echo "El reproductor ya est\xe1 reproduciendo\\n";\n    }\n\n    public function pause(AudioPlayer $player) {\n        echo "Pausando el reproductor\\n";\n        $player->setState(new PausedState());\n    }\n\n    public function stop(AudioPlayer $player) {\n        echo "Deteniendo el reproductor\\n";\n        $player->setState(new StoppedState());\n    }\n}\n\nclass PausedState implements AudioState {\n    public function play(AudioPlayer $player) {\n        echo "Reanudando la reproducci\xf3n\\n";\n        $player->setState(new PlayingState());\n    }\n\n    public function pause(AudioPlayer $player) {\n        echo "El reproductor ya est\xe1 en pausa\\n";\n    }\n\n    public function stop(AudioPlayer $player) {\n        echo "Deteniendo el reproductor\\n";\n        $player->setState(new StoppedState());\n    }\n}\n\nclass StoppedState implements AudioState {\n    public function play(AudioPlayer $player) {\n        echo "Iniciando la reproducci\xf3n\\n";\n        $player->setState(new PlayingState());\n    }\n\n    public function pause(AudioPlayer $player) {\n        echo "El reproductor est\xe1 detenido, no se puede pausar\\n";\n    }\n\n    public function stop(AudioPlayer $player) {\n        echo "El reproductor ya est\xe1 detenido\\n";\n    }\n}\n')),(0,o.kt)("p",null,"En este c\xf3digo, la interfaz ",(0,o.kt)("strong",{parentName:"p"},"AudioState")," define los m\xe9todos ",(0,o.kt)("strong",{parentName:"p"},"play()"),", ",(0,o.kt)("strong",{parentName:"p"},"pause()")," y ",(0,o.kt)("strong",{parentName:"p"},"stop()")," que deben ser implementados por cada estado. La clase ",(0,o.kt)("strong",{parentName:"p"},"AudioPlayer")," es el contexto y tiene una referencia al estado actual en la propiedad ",(0,o.kt)("strong",{parentName:"p"},"state"),". La clase ",(0,o.kt)("strong",{parentName:"p"},"AudioPlayer")," tambi\xe9n tiene m\xe9todos ",(0,o.kt)("strong",{parentName:"p"},"play()"),", ",(0,o.kt)("strong",{parentName:"p"},"pause()")," y ",(0,o.kt)("strong",{parentName:"p"},"stop()")," que delegan el comportamiento al estado actual."),(0,o.kt)("p",null,"Las clases ",(0,o.kt)("strong",{parentName:"p"},"PlayingState"),", ",(0,o.kt)("strong",{parentName:"p"},"PausedState")," y ",(0,o.kt)("strong",{parentName:"p"},"StoppedState")," implementan la interfaz ",(0,o.kt)("strong",{parentName:"p"},"AudioState")," y definen el comportamiento correspondiente para cada estado."),(0,o.kt)("p",null,"Este ejemplo ilustra c\xf3mo el patr\xf3n State permite que un objeto cambie su comportamiento en funci\xf3n de su estado interno, sin necesidad de cambiar su clase."),(0,o.kt)("h4",{id:"test-6"},"Test"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfCu\xe1l es el prop\xf3sito del patr\xf3n State?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"a) Separar la creaci\xf3n de objetos complejos de su implementaci\xf3n")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"b) Proporcionar una interfaz simplificada a un conjunto de interfaces complejas")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"c) Permitir que un objeto cambie su comportamiento en funci\xf3n de su estado interno")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"d) Proporcionar un \xfanico punto de acceso para acceder a varios objetos relacionados")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Respuesta: c) Permitir que un objeto cambie su comportamiento en funci\xf3n de su estado interno"))),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfCu\xe1l es el objeto que cambia de comportamiento en el patr\xf3n State?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"a) El objeto de contexto")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"b) El objeto de estado")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"c) El objeto cliente")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"d) El objeto adaptador\xe7")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Respuesta: a) El objeto de contexto"))),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 interfaz define los m\xe9todos que deben ser implementados por cada estado en el patr\xf3n State?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"a) State")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"b) Context")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"c) Client")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"d) Adapter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Respuesta: a) State"))),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 ventaja proporciona el patr\xf3n State en la organizaci\xf3n del c\xf3digo?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Simplifica la creaci\xf3n de objetos complejos"),(0,o.kt)("li",{parentName:"ul"},"b) Proporciona una interfaz simplificada a un conjunto de interfaces complejas"),(0,o.kt)("li",{parentName:"ul"},"c) Aumenta la modularidad y la flexibilidad del c\xf3digo"),(0,o.kt)("li",{parentName:"ul"},"d) Reduce el acoplamiento entre objetos")),(0,o.kt)("p",null,"-Respuesta: c) Aumenta la modularidad y la flexibilidad del c\xf3digo"),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfCu\xe1l es una posible desventaja del patr\xf3n State?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"a) Aumento de la complejidad del c\xf3digo")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"b) Reducci\xf3n de la modularidad del c\xf3digo")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"c) Aumento del acoplamiento entre objetos")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"d) No proporciona una interfaz simplificada a un conjunto de interfaces complejas")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Respuesta: a) Aumento de la complejidad del c\xf3digo"))),(0,o.kt)("h3",{id:"mediator"},"Mediator"),(0,o.kt)("p",null,"\xe7El patr\xf3n Mediator es un patr\xf3n de dise\xf1o de software que se utiliza para reducir la complejidad de la comunicaci\xf3n entre objetos en un sistema. En lugar de que los objetos se comuniquen directamente entre s\xed, se utilizan un objeto mediador que coordina la comunicaci\xf3n entre ellos. Esto ayuda a evitar el acoplamiento entre los objetos y permite que el sistema sea m\xe1s escalable y f\xe1cil de mantener."),(0,o.kt)("p",null,"El objeto mediador act\xfaa como un intermediario entre los objetos que necesitan comunicarse. En lugar de que los objetos se comuniquen directamente, se comunican con el objeto mediador, que se encarga de coordinar la comunicaci\xf3n entre ellos."),(0,o.kt)("p",null,"Un ejemplo de aplicaci\xf3n del patr\xf3n Mediator ser\xeda un sistema de chat en l\xednea. En un sistema de chat, hay varios usuarios que necesitan comunicarse entre s\xed. En lugar de que los usuarios se comuniquen directamente, se utiliza un objeto mediador que coordina la comunicaci\xf3n entre ellos. El objeto mediador en este caso podr\xeda ser un servidor de chat que se encarga de enviar los mensajes de un usuario a otro."),(0,o.kt)("p",null,"Otro ejemplo podr\xeda ser un sistema de control de tr\xe1fico a\xe9reo. En este caso, los aviones que necesitan aterrizar y despegar necesitan comunicarse entre s\xed y con la torre de control. En lugar de que los aviones se comuniquen directamente, se utiliza un objeto mediador que coordina la comunicaci\xf3n entre ellos y con la torre de control."),(0,o.kt)("p",null,"Una posible desventaja del patr\xf3n Mediator es que puede introducir un punto \xfanico de fallo en el sistema. Si el objeto mediador falla, toda la comunicaci\xf3n entre los objetos puede verse afectada. Sin embargo, esto puede mitigarse mediante el uso de redundancia y mecanismos de recuperaci\xf3n ante fallos."))}p.isMDXComponent=!0}}]);