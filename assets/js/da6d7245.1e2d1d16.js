"use strict";(self.webpackChunksolid=self.webpackChunksolid||[]).push([[621],{3905:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>g});var r=a(7294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function t(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,r,o=function(e,n){if(null==e)return{};var a,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):t(t({},n),e)),a},d=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var a=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(a),m=o,g=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return a?r.createElement(g,t(t({ref:n},d),{},{components:a})):r.createElement(g,t({ref:n},d))}));function g(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=a.length,t=new Array(i);t[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:o,t[1]=s;for(var c=2;c<i;c++)t[c]=a[c];return r.createElement.apply(null,t)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7370:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=a(7462),o=(a(7294),a(3905));const i={sidebar_position:5},t="Principio de inversi\xf3n de dependencia (DIP)",s={unversionedId:"tutorial-basics/DIP",id:"tutorial-basics/DIP",title:"Principio de inversi\xf3n de dependencia (DIP)",description:"\xbfQu\xe9 es DIP?",source:"@site/docs/tutorial-basics/06-DIP.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/DIP",permalink:"/solid-doc/docs/tutorial-basics/DIP",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/tutorial-basics/06-DIP.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Principio de segregaci\xf3n de la interfaz (ISP)",permalink:"/solid-doc/docs/tutorial-basics/ISP"},next:{title:"test",permalink:"/solid-doc/docs/tutorial-basics/test"}},l={},c=[{value:"\xbfQu\xe9 es DIP?",id:"qu\xe9-es-dip",level:2},{value:"Ejemplos de c\xf3mo aplicar el principio DIP en el desarrollo de software",id:"ejemplos-de-c\xf3mo-aplicar-el-principio-dip-en-el-desarrollo-de-software",level:2},{value:"Patrones de dise\xf1o relacionados con el principio DIP",id:"patrones-de-dise\xf1o-relacionados-con-el-principio-dip",level:2}],d={toc:c},p="wrapper";function u(e){let{components:n,...a}=e;return(0,o.kt)(p,(0,r.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"principio-de-inversi\xf3n-de-dependencia-dip"},"Principio de inversi\xf3n de dependencia (DIP)"),(0,o.kt)("h2",{id:"qu\xe9-es-dip"},"\xbfQu\xe9 es DIP?"),(0,o.kt)("p",null,"El principio DIP (Dependency Inversion Principle) es otro de los principios SOLID en el desarrollo de software. Este principio establece que los m\xf3dulos de alto nivel no deben depender de los m\xf3dulos de bajo nivel, sino que ambos deben depender de abstracciones. Adem\xe1s, las abstracciones no deben depender de los detalles, sino que los detalles deben depender de las abstracciones."),(0,o.kt)("p",null,"En otras palabras, este principio fomenta el uso de abstracciones en lugar de clases concretas para reducir el acoplamiento entre los m\xf3dulos del software. Al utilizar abstracciones, los m\xf3dulos se vuelven m\xe1s independientes y flexibles, lo que facilita la incorporaci\xf3n de cambios y la realizaci\xf3n de pruebas."),(0,o.kt)("p",null,"El principio DIP se relaciona estrechamente con el principio OCP, ya que permite la creaci\xf3n de sistemas que son m\xe1s f\xe1ciles de extender y mantener. Al seguir este principio, se puede reducir la cantidad de c\xf3digo que debe ser modificado cuando se realizan cambios en el software, lo que facilita la implementaci\xf3n de nuevas funcionalidades."),(0,o.kt)("p",null,"En resumen, el principio DIP establece que los m\xf3dulos de alto nivel no deben depender de los detalles de implementaci\xf3n de los m\xf3dulos de bajo nivel y promueve el uso de abstracciones para reducir el acoplamiento entre los m\xf3dulos del software."),(0,o.kt)("h2",{id:"ejemplos-de-c\xf3mo-aplicar-el-principio-dip-en-el-desarrollo-de-software"},"Ejemplos de c\xf3mo aplicar el principio DIP en el desarrollo de software"),(0,o.kt)("p",null,"Supongamos que tenemos una clase Logger que se encarga de escribir registros de logs. En lugar de que otras clases accedan directamente a esta clase, creamos una interfaz LoggerInterface que define los m\xe9todos que se pueden usar para escribir logs. Luego, las clases que necesitan escribir logs implementan esta interfaz y pueden recibir una instancia de cualquier clase que implemente LoggerInterface."),(0,o.kt)("p",null,"As\xed, en lugar de depender de una clase concreta, las clases que necesitan escribir logs dependen de una abstracci\xf3n (la interfaz LoggerInterface) que puede ser implementada por cualquier clase que cumpla con los requisitos definidos en la interfaz. Esto reduce el acoplamiento entre clases y hace que el c\xf3digo sea m\xe1s flexible y mantenible."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"interface LoggerInterface {\n    public function log($message);\n}\n\nclass FileLogger implements LoggerInterface {\n    public function log($message) {\n        // Escribe el mensaje en un archivo de log\n    }\n}\n\nclass DatabaseLogger implements LoggerInterface {\n    public function log($message) {\n        // Inserta el mensaje en la base de datos\n    }\n}\n\nclass User {\n    private $logger;\n    \n    public function __construct(LoggerInterface $logger) {\n        $this->logger = $logger;\n    }\n    \n    public function doSomething() {\n        // ... hacer algo ...\n        $this->logger->log('Se ha realizado una acci\xf3n.');\n    }\n}\n\n$fileLogger = new FileLogger();\n$user = new User($fileLogger);\n$user->doSomething();\n\n$databaseLogger = new DatabaseLogger();\n$user = new User($databaseLogger);\n$user->doSomething();\n")),(0,o.kt)("p",null,"En este ejemplo, FileLogger e DatabaseLogger implementan la interfaz LoggerInterface. Luego, la clase User depende de LoggerInterface en lugar de depender de una clase concreta de logger. Esto permite que cualquier objeto que implemente la interfaz pueda ser utilizado como un logger."),(0,o.kt)("h2",{id:"patrones-de-dise\xf1o-relacionados-con-el-principio-dip"},"Patrones de dise\xf1o relacionados con el principio DIP"),(0,o.kt)("p",null,"Los patrones de dise\xf1o que est\xe1n relacionados con el principio DIP (Dependency Inversion Principle) son principalmente dos:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Inyecci\xf3n de Dependencias (Dependency Injection):")," Este patr\xf3n de dise\xf1o se enfoca en invertir la responsabilidad de creaci\xf3n y gesti\xf3n de objetos a otra clase o entidad. En lugar de que una clase cree una instancia de una dependencia, esta dependencia es provista o inyectada a la clase desde el exterior. De esta manera, se logra reducir el acoplamiento entre las clases y se permite una mayor flexibilidad y facilidad de mantenimiento.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Inversi\xf3n de Control (Inversion of Control):")," Este patr\xf3n de dise\xf1o consiste en delegar el control de ciertas tareas o procesos a un componente externo o a un contenedor que act\xfaa como coordinador. El objetivo es reducir el acoplamiento entre las clases y permitir una mayor flexibilidad y escalabilidad en el sistema. Este patr\xf3n se puede implementar mediante el uso de frameworks o librer\xedas que proporcionan el contenedor de inversi\xf3n de control, como Spring Framework en Java o Laravel en PHP."))))}u.isMDXComponent=!0}}]);