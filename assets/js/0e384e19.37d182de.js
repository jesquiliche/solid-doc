"use strict";(self.webpackChunksolid=self.webpackChunksolid||[]).push([[671],{3905:(e,o,a)=>{a.d(o,{Zo:()=>c,kt:()=>f});var r=a(7294);function t(e,o,a){return o in e?Object.defineProperty(e,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[o]=a,e}function n(e,o){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);o&&(r=r.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var o=1;o<arguments.length;o++){var a=null!=arguments[o]?arguments[o]:{};o%2?n(Object(a),!0).forEach((function(o){t(e,o,a[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(a,o))}))}return e}function i(e,o){if(null==e)return{};var a,r,t=function(e,o){if(null==e)return{};var a,r,t={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],o.indexOf(a)>=0||(t[a]=e[a]);return t}(e,o);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],o.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var l=r.createContext({}),d=function(e){var o=r.useContext(l),a=o;return e&&(a="function"==typeof e?e(o):s(s({},o),e)),a},c=function(e){var o=d(e.components);return r.createElement(l.Provider,{value:o},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var o=e.children;return r.createElement(r.Fragment,{},o)}},m=r.forwardRef((function(e,o){var a=e.components,t=e.mdxType,n=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=d(a),m=t,f=p["".concat(l,".").concat(m)]||p[m]||u[m]||n;return a?r.createElement(f,s(s({ref:o},c),{},{components:a})):r.createElement(f,s({ref:o},c))}));function f(e,o){var a=arguments,t=o&&o.mdxType;if("string"==typeof e||t){var n=a.length,s=new Array(n);s[0]=m;var i={};for(var l in o)hasOwnProperty.call(o,l)&&(i[l]=o[l]);i.originalType=e,i[p]="string"==typeof e?e:t,s[1]=i;for(var d=2;d<n;d++)s[d]=a[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9881:(e,o,a)=>{a.r(o),a.d(o,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>n,metadata:()=>i,toc:()=>d});var r=a(7462),t=(a(7294),a(3905));const n={sidebar_position:1},s="Introducci\xf3n",i={unversionedId:"intro",id:"intro",title:"Introducci\xf3n",description:"\xbfQu\xe9 es SOLID?",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/solid-doc/docs/intro",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Principio de responsabilidad \xfanica (SRP)",permalink:"/solid-doc/docs/tutorial-basics/SRP"}},l={},d=[{value:"\xbfQu\xe9 es SOLID?",id:"qu\xe9-es-solid",level:2},{value:"\xbfPor qu\xe9 es importante seguir los principios SOLID en el desarrollo de software?",id:"por-qu\xe9-es-importante-seguir-los-principios-solid-en-el-desarrollo-de-software",level:2},{value:"\xbfQu\xe9 son los patrones de dise\xf1o de software?",id:"qu\xe9-son-los-patrones-de-dise\xf1o-de-software",level:2},{value:"\xbfPor qu\xe9 son \xfatiles los patrones de dise\xf1o en el desarrollo de software?",id:"por-qu\xe9-son-\xfatiles-los-patrones-de-dise\xf1o-en-el-desarrollo-de-software",level:2}],c={toc:d},p="wrapper";function u(e){let{components:o,...a}=e;return(0,t.kt)(p,(0,r.Z)({},c,a,{components:o,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"introducci\xf3n"},"Introducci\xf3n"),(0,t.kt)("h2",{id:"qu\xe9-es-solid"},"\xbfQu\xe9 es SOLID?"),(0,t.kt)("p",null,'SOLID es un acr\xf3nimo que representa un conjunto de principios de dise\xf1o de software que se utilizan para desarrollar software de alta calidad, flexible y f\xe1cil de mantener. Los cinco principios SOLID fueron propuestos por el programador Robert C. Martin (tambi\xe9n conocido como "Uncle Bob") y se refieren a los siguientes conceptos:'),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"S: Principio de responsabilidad \xfanica (SRP)"),(0,t.kt)("li",{parentName:"ul"},"O: Principio de abierto/cerrado (OCP)"),(0,t.kt)("li",{parentName:"ul"},"L: Principio de sustituci\xf3n de Liskov (LSP)"),(0,t.kt)("li",{parentName:"ul"},"I: Principio de segregaci\xf3n de la interfaz (ISP)"),(0,t.kt)("li",{parentName:"ul"},"D: Principio de inversi\xf3n de dependencia (DIP)")),(0,t.kt)("p",null,"Los principios SOLID est\xe1n dise\xf1ados para ayudar a los programadores a crear software que sea f\xe1cil de leer, de mantener y de extender, y que pueda adaptarse r\xe1pidamente a los cambios en los requisitos del negocio o del usuario."),(0,t.kt)("h2",{id:"por-qu\xe9-es-importante-seguir-los-principios-solid-en-el-desarrollo-de-software"},"\xbfPor qu\xe9 es importante seguir los principios SOLID en el desarrollo de software?"),(0,t.kt)("p",null,"Es importante seguir los principios SOLID en el desarrollo de software por varias razones:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Facilita el mantenimiento del software: Al seguir los principios SOLID, se crean aplicaciones m\xe1s f\xe1ciles de mantener y actualizar. El c\xf3digo es m\xe1s f\xe1cil de leer, lo que hace que sea m\xe1s sencillo para los desarrolladores realizar cambios y mejoras en el futuro.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Mejora la escalabilidad: Al dise\xf1ar aplicaciones utilizando los principios SOLID, se crea un c\xf3digo m\xe1s flexible y escalable que puede adaptarse a cambios en los requisitos del negocio o del usuario.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Aumenta la eficiencia en el desarrollo: Al seguir los principios SOLID, se reduce el tiempo que se tarda en desarrollar nuevas caracter\xedsticas y funcionalidades. Esto se debe a que el c\xf3digo es m\xe1s f\xe1cil de entender, lo que permite a los desarrolladores trabajar de forma m\xe1s r\xe1pida y efectiva.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Favorece la reutilizaci\xf3n: Al seguir los principios SOLID, se crea un c\xf3digo m\xe1s modular y reutilizable que puede ser utilizado en diferentes partes del software. Esto reduce la cantidad de c\xf3digo que los desarrolladores necesitan escribir y mejora la eficiencia en el desarrollo.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Mejora la calidad del software: Al seguir los principios SOLID, se crean aplicaciones m\xe1s robustas, estables y seguras. El c\xf3digo se prueba de forma m\xe1s efectiva, lo que reduce el n\xfamero de errores y mejora la calidad general del software."))),(0,t.kt)("h2",{id:"qu\xe9-son-los-patrones-de-dise\xf1o-de-software"},"\xbfQu\xe9 son los patrones de dise\xf1o de software?"),(0,t.kt)("p",null,"Los patrones de dise\xf1o de software son soluciones comprobadas y estandarizadas para problemas comunes en el dise\xf1o de software. Son una herramienta valiosa para los desarrolladores de software, ya que ayudan a resolver problemas complejos y permiten crear software de alta calidad que sea f\xe1cil de entender, mantener y extender."),(0,t.kt)("p",null,'Los patrones de dise\xf1o surgieron en la d\xe9cada de 1990, cuando un grupo de ingenieros de software liderados por Erich Gamma, Richard Helm, Ralph Johnson y John Vlissides publicaron un libro llamado "Design Patterns: Elements of Reusable Object-Oriented Software". Este libro se convirti\xf3 en un cl\xe1sico instant\xe1neo en la comunidad de ingenier\xeda de software y defini\xf3 los patrones de dise\xf1o como un conjunto de soluciones generales y reutilizables para problemas comunes en el dise\xf1o de software.'),(0,t.kt)("p",null,"Los patrones de dise\xf1o se dividen en tres categor\xedas principales: patrones de creaci\xf3n, patrones de estructuraci\xf3n y patrones de comportamiento."),(0,t.kt)("p",null,"Los patrones de creaci\xf3n se utilizan para crear objetos y clases en una forma que sea flexible y f\xe1cil de mantener. Estos patrones incluyen Singleton, Factory, Builder, Prototype, y Abstract Factory, entre otros."),(0,t.kt)("p",null,"Los patrones de estructuraci\xf3n se utilizan para establecer la estructura de una aplicaci\xf3n, incluyendo la relaci\xf3n entre clases y objetos. Estos patrones incluyen Adapter, Bridge, Composite, Decorator, Facade, Flyweight, Proxy, y otros."),(0,t.kt)("p",null,"Los patrones de comportamiento se utilizan para controlar la interacci\xf3n entre objetos y clases. Estos patrones incluyen Observer, Strategy, Template Method, Command, Interpreter, Iterator, Mediator, Memento, State, y Visitor, entre otros."),(0,t.kt)("p",null,"Cada patr\xf3n de dise\xf1o tiene su propia finalidad y aplicaci\xf3n, pero todos comparten la caracter\xedstica de que son soluciones reutilizables que han sido comprobadas y documentadas. Al utilizar patrones de dise\xf1o de software, los desarrolladores pueden evitar cometer errores comunes y seguir las mejores pr\xe1cticas en el dise\xf1o de software. Esto ayuda a crear un c\xf3digo m\xe1s limpio, organizado y f\xe1cil de mantener, lo que se traduce en una mayor eficiencia y una menor cantidad de errores en el proceso de desarrollo de software."),(0,t.kt)("admonition",{type:"tip"},(0,t.kt)("table",{parentName:"admonition"},(0,t.kt)("thead",{parentName:"table"},(0,t.kt)("tr",{parentName:"thead"},(0,t.kt)("th",{parentName:"tr",align:null},"Categor\xeda"),(0,t.kt)("th",{parentName:"tr",align:null},"Patr\xf3n"))),(0,t.kt)("tbody",{parentName:"table"},(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",{parentName:"tr",align:null},"Creacionales"),(0,t.kt)("td",{parentName:"tr",align:null},"Singleton, Builder, Factory Method, Abstract Factory, Prototype")),(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",{parentName:"tr",align:null},"Estructurales"),(0,t.kt)("td",{parentName:"tr",align:null},"Adapter, Bridge, Composite, Decorator, Facade, Flyweight, Proxy")),(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",{parentName:"tr",align:null},"Comportamiento"),(0,t.kt)("td",{parentName:"tr",align:null},"Chain of Responsibility, Command, Interpreter, Iterator, Mediator, Memento, Observer, State, Strategy, Template Method, Visitor"))))),(0,t.kt)("h2",{id:"por-qu\xe9-son-\xfatiles-los-patrones-de-dise\xf1o-en-el-desarrollo-de-software"},"\xbfPor qu\xe9 son \xfatiles los patrones de dise\xf1o en el desarrollo de software?"),(0,t.kt)("p",null,"Los patrones de dise\xf1o son \xfatiles en el desarrollo de software por varias razones:"),(0,t.kt)("p",null,"1.Proporcionan soluciones probadas: Los patrones de dise\xf1o son soluciones a problemas comunes que han sido probadas y utilizadas en diferentes proyectos de software. Al implementar un patr\xf3n de dise\xf1o, se est\xe1 utilizando una soluci\xf3n comprobada que ha funcionado bien en otras ocasiones."),(0,t.kt)("ol",{start:2},(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Ahorran tiempo y esfuerzo: Al utilizar patrones de dise\xf1o, se puede evitar el esfuerzo de tener que dise\xf1ar una soluci\xf3n desde cero y se puede ahorrar tiempo en el proceso de desarrollo. Los patrones de dise\xf1o ya han sido dise\xf1ados y documentados, por lo que es m\xe1s f\xe1cil implementarlos.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Mejoran la calidad del c\xf3digo: Los patrones de dise\xf1o son soluciones que se han probado en diferentes proyectos y, por lo tanto, se sabe que funcionan bien. Al implementarlos, se puede mejorar la calidad del c\xf3digo y reducir la cantidad de errores y problemas en el mismo.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Facilitan la comunicaci\xf3n: Los patrones de dise\xf1o son una forma com\xfan de comunicar soluciones y problemas de dise\xf1o entre los miembros del equipo de desarrollo de software. Al utilizar un patr\xf3n de dise\xf1o, se puede comunicar de forma m\xe1s efectiva la soluci\xf3n a un problema com\xfan en el desarrollo de software."))),(0,t.kt)("p",null,"En resumen, los patrones de dise\xf1o son \xfatiles porque proporcionan soluciones probadas, ahorran tiempo y esfuerzo, mejoran la calidad del c\xf3digo y facilitan la comunicaci\xf3n entre los miembros del equipo de desarrollo."),(0,t.kt)("admonition",{title:"Historia",type:"tip"},(0,t.kt)("p",{parentName:"admonition"},'Los patrones de dise\xf1o de software surgieron a partir de la d\xe9cada de 1980, cuando los desarrolladores de software se dieron cuenta de que muchos de los problemas que estaban resolviendo ten\xedan soluciones comunes y recurrentes. En 1994, los autores Erich Gamma, Richard Helm, Ralph Johnson y John Vlissides publicaron un libro llamado "Design Patterns: Elements of Reusable Object-Oriented Software" (Patrones de Dise\xf1o: Elementos de Software Orientado a Objetos Reutilizable) que se convirti\xf3 en un referente en la materia.'),(0,t.kt)("p",{parentName:"admonition"},"El libro present\xf3 23 patrones de dise\xf1o que pod\xedan ser aplicados en el desarrollo de software orientado a objetos para resolver problemas comunes de dise\xf1o. Estos patrones de dise\xf1o fueron identificados por los autores a partir de su experiencia en el desarrollo de software y en la revisi\xf3n de patrones de dise\xf1o existentes en la literatura."),(0,t.kt)("p",{parentName:"admonition"},"Desde entonces, los patrones de dise\xf1o de software se han convertido en un tema importante en el desarrollo de software y se han identificado muchos otros patrones. Los patrones de dise\xf1o se utilizan ampliamente en el desarrollo de software para resolver problemas comunes de dise\xf1o y mejorar la calidad y mantenibilidad del c\xf3digo.")))}u.isMDXComponent=!0}}]);