"use strict";(self.webpackChunksolid=self.webpackChunksolid||[]).push([[929],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>b});var n=t(7294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,o=function(e,a){if(null==e)return{};var t,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),u=function(e){var a=n.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},c=function(e){var a=u(e.components);return n.createElement(i.Provider,{value:a},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(t),m=o,b=d["".concat(i,".").concat(m)]||d[m]||p[m]||r;return t?n.createElement(b,s(s({ref:a},c),{},{components:t})):n.createElement(b,s({ref:a},c))}));function b(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=m;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l[d]="string"==typeof e?e:o,s[1]=l;for(var u=2;u<r;u++)s[u]=t[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4097:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=t(7462),o=(t(7294),t(3905));const r={sidebar_position:4},s="Patrones de dise\xf1o de comportamiento",l={unversionedId:"tutorial-extras/comportamiento",id:"tutorial-extras/comportamiento",title:"Patrones de dise\xf1o de comportamiento",description:"\xbfQu\xe9 son los patrones de dise\xf1o de compartamiento?",source:"@site/docs/tutorial-extras/04-comportamiento.md",sourceDirName:"tutorial-extras",slug:"/tutorial-extras/comportamiento",permalink:"/solid-doc/docs/tutorial-extras/comportamiento",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/tutorial-extras/04-comportamiento.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Patrones de dise\xf1o estructurales",permalink:"/solid-doc/docs/tutorial-extras/Estructurales"}},i={},u=[{value:"\xbfQu\xe9 son los patrones de dise\xf1o de compartamiento?",id:"qu\xe9-son-los-patrones-de-dise\xf1o-de-compartamiento",level:2},{value:"Observer",id:"observer",level:3},{value:"Desventajas de Observer",id:"desventajas-de-observer",level:4},{value:"Test",id:"test",level:4},{value:"Strategy",id:"strategy",level:3},{value:"Desventajas de Strategy",id:"desventajas-de-strategy",level:4},{value:"Ejemplo de desarrollo",id:"ejemplo-de-desarrollo",level:5},{value:"Test",id:"test-1",level:4}],c={toc:u},d="wrapper";function p(e){let{components:a,...t}=e;return(0,o.kt)(d,(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"patrones-de-dise\xf1o-de-comportamiento"},"Patrones de dise\xf1o de comportamiento"),(0,o.kt)("h2",{id:"qu\xe9-son-los-patrones-de-dise\xf1o-de-compartamiento"},"\xbfQu\xe9 son los patrones de dise\xf1o de compartamiento?"),(0,o.kt)("p",null,"Los patrones de comportamiento son un conjunto de patrones de dise\xf1o que se utilizan para resolver problemas relacionados con la comunicaci\xf3n y el comportamiento entre objetos en un sistema. Estos patrones se centran en la forma en que los objetos interact\xfaan entre s\xed y en c\xf3mo se distribuyen las responsabilidades entre ellos."),(0,o.kt)("p",null,"Algunos ejemplos de patrones de comportamiento son:"),(0,o.kt)("p",null,"Patr\xf3n Observer: Este patr\xf3n se utiliza cuando se necesita notificar a varios objetos sobre un cambio en el estado de un objeto. El patr\xf3n Observer define una relaci\xf3n de uno a muchos entre los objetos, de modo que cuando el objeto cambia su estado, todos los objetos registrados son notificados y actualizados autom\xe1ticamente."),(0,o.kt)("p",null,"Patr\xf3n Strategy: Este patr\xf3n se utiliza cuando se necesita cambiar din\xe1micamente el algoritmo utilizado por un objeto en tiempo de ejecuci\xf3n. El patr\xf3n Strategy permite encapsular diferentes algoritmos en clases separadas y permitir que el objeto utilice uno u otro en funci\xf3n de la situaci\xf3n."),(0,o.kt)("p",null,"Patr\xf3n Command: Este patr\xf3n se utiliza cuando se necesita encapsular una solicitud como un objeto, permitiendo la parametrizaci\xf3n de los clientes con diferentes solicitudes y la ejecuci\xf3n de diferentes comandos en diferentes momentos. El patr\xf3n Command separa la responsabilidad de solicitar una acci\xf3n de la implementaci\xf3n real de la acci\xf3n."),(0,o.kt)("p",null,"Patr\xf3n Chain of Responsibility: Este patr\xf3n se utiliza cuando se necesita procesar una solicitud a trav\xe9s de una cadena de objetos que tienen la posibilidad de manejarla. El patr\xf3n Chain of Responsibility establece una cadena de objetos, donde cada objeto tiene la oportunidad de manejar la solicitud o pasarla al siguiente objeto de la cadena."),(0,o.kt)("p",null,"Patr\xf3n Template Method: Este patr\xf3n se utiliza cuando se necesita definir un algoritmo en una clase base, pero permitir que las subclases proporcionen implementaciones espec\xedficas de algunos pasos. El patr\xf3n Template Method define una estructura de algoritmo en una clase base y permite que las subclases redefinan o extiendan partes espec\xedficas del algoritmo."),(0,o.kt)("p",null,"Patr\xf3n Interpreter: Este patr\xf3n se utiliza cuando se necesita interpretar y ejecutar un lenguaje de expresiones. El patr\xf3n Interpreter define una gram\xe1tica para el lenguaje de expresiones y proporciona una clase int\xe9rprete que utiliza la gram\xe1tica para interpretar y ejecutar las expresiones."),(0,o.kt)("p",null,"Estos son solo algunos ejemplos de patrones de comportamiento que se utilizan en el dise\xf1o de sistemas orientados a objetos. Cada patr\xf3n tiene sus propias ventajas y desventajas y debe evaluarse cuidadosamente antes de aplicarlo en una situaci\xf3n determinada."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Patr\xf3n de Comportamiento"),(0,o.kt)("th",{parentName:"tr",align:null},"Descripci\xf3n"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Observer"),(0,o.kt)("td",{parentName:"tr",align:null},"Define una relaci\xf3n uno a muchos entre objetos, de modo que cuando un objeto cambia su estado, todos los objetos registrados son notificados y actualizados autom\xe1ticamente.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Strategy"),(0,o.kt)("td",{parentName:"tr",align:null},"Permite cambiar din\xe1micamente el algoritmo utilizado por un objeto en tiempo de ejecuci\xf3n.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Command"),(0,o.kt)("td",{parentName:"tr",align:null},"Encapsula una solicitud como un objeto, permitiendo la parametrizaci\xf3n de los clientes con diferentes solicitudes y la ejecuci\xf3n de diferentes comandos en diferentes momentos.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Chain of Responsibility"),(0,o.kt)("td",{parentName:"tr",align:null},"Procesa una solicitud a trav\xe9s de una cadena de objetos que tienen la posibilidad de manejarla.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Template Method"),(0,o.kt)("td",{parentName:"tr",align:null},"Define una estructura de algoritmo en una clase base y permite que las subclases redefinan o extiendan partes espec\xedficas del algoritmo.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Interpreter"),(0,o.kt)("td",{parentName:"tr",align:null},"Interpreta y ejecuta un lenguaje de expresiones.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"State"),(0,o.kt)("td",{parentName:"tr",align:null},"Permite a un objeto cambiar su comportamiento cuando su estado interno cambia.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Iterator"),(0,o.kt)("td",{parentName:"tr",align:null},"Proporciona una forma de acceder secuencialmente a los elementos de una colecci\xf3n sin exponer su representaci\xf3n subyacente.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Mediator"),(0,o.kt)("td",{parentName:"tr",align:null},"Define un objeto que encapsula la forma en que los objetos interact\xfaan entre s\xed, promoviendo el bajo acoplamiento y la independencia entre ellos.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Memento"),(0,o.kt)("td",{parentName:"tr",align:null},"Permite capturar y restaurar el estado interno de un objeto sin violar el principio de encapsulamiento.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Visitor"),(0,o.kt)("td",{parentName:"tr",align:null},"Permite definir una nueva operaci\xf3n sin cambiar las clases de los objetos sobre los que opera.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Null Object"),(0,o.kt)("td",{parentName:"tr",align:null},'Provee un objeto "nulo" que act\xfaa como sustituto de otro objeto que no est\xe1 disponible o que no existe.')))),(0,o.kt)("h3",{id:"observer"},"Observer"),(0,o.kt)("p",null,"El patr\xf3n Observer es un patr\xf3n de dise\xf1o de comportamiento que se utiliza cuando se desea establecer una relaci\xf3n uno a muchos entre objetos. El patr\xf3n Observer define un objeto (llamado sujeto) que mantiene una lista de suscriptores (observadores) y notifica autom\xe1ticamente a todos los observadores cuando cambia su estado."),(0,o.kt)("p",null,"El patr\xf3n Observer consta de los siguientes elementos:"),(0,o.kt)("p",null,"Sujeto: Es el objeto que mantiene una lista de observadores y notifica autom\xe1ticamente a todos los observadores cuando su estado cambia.\nObservador: Es una interfaz que define el m\xe9todo de actualizaci\xf3n, que se llama cuando el sujeto notifica a los observadores sobre un cambio de estado.\nObservadores concretos: Son objetos que implementan la interfaz Observador y se registran para recibir notificaciones del sujeto.\nAqu\xed hay un ejemplo de c\xf3digo en PHP que ilustra c\xf3mo implementar el patr\xf3n Observer:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// Definir la interfaz Observador\ninterface Observador {\n    public function actualizar(Sujeto $sujeto);\n}\n\n// Definir la clase Sujeto\nclass Sujeto {\n    private $observadores = array();\n    private $estado;\n\n    public function agregarObservador(Observador $observador) {\n        $this->observadores[] = $observador;\n    }\n\n    public function eliminarObservador(Observador $observador) {\n        $index = array_search($observador, $this->observadores);\n        if ($index !== false) {\n            unset($this->observadores[$index]);\n        }\n    }\n\n    public function notificarObservadores() {\n        foreach ($this->observadores as $observador) {\n            $observador->actualizar($this);\n        }\n    }\n\n    public function setEstado($estado) {\n        $this->estado = $estado;\n        $this->notificarObservadores();\n    }\n\n    public function getEstado() {\n        return $this->estado;\n    }\n}\n\n// Definir una clase Observador concreta\nclass ObservadorConcreto implements Observador {\n    private $nombre;\n\n    public function __construct($nombre) {\n        $this->nombre = $nombre;\n    }\n\n    public function actualizar(Sujeto $sujeto) {\n        echo "Observador {$this->nombre} ha sido notificado. El nuevo estado del sujeto es: {$sujeto->getEstado()}<br>";\n    }\n}\n\n// Uso del patr\xf3n Observer\n$sujeto = new Sujeto();\n\n$observador1 = new ObservadorConcreto("Observador 1");\n$observador2 = new ObservadorConcreto("Observador 2");\n\n$sujeto->agregarObservador($observador1);\n$sujeto->agregarObservador($observador2);\n\n$sujeto->setEstado("estado 1");\n\n$sujeto->eliminarObservador($observador2);\n\n$sujeto->setEstado("estado 2");\n')),(0,o.kt)("p",null,"En este ejemplo, la clase ",(0,o.kt)("strong",{parentName:"p"},"Sujeto")," mantiene una lista de ",(0,o.kt)("strong",{parentName:"p"},"observadores")," y notifica a todos los observadores registrados cuando su estado cambia mediante el m\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"notificarObservadores()"),". Los observadores concretos, en este caso ",(0,o.kt)("strong",{parentName:"p"},"ObservadorConcreto"),", implementan la interfaz Observador y se registran en el sujeto mediante el m\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"agregarObservador()"),". Cuando el estado del sujeto cambia, los observadores son notificados autom\xe1ticamente y se les llama al m\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"actualizar()"),". En este m\xe9todo, los observadores concretos realizan las operaciones necesarias con la informaci\xf3n actualizada del sujeto."),(0,o.kt)("p",null,"En este ejemplo, se crean dos observadores concretos y se registran en el sujeto. Luego se cambia el estado del sujeto y se notifica autom\xe1ticamente a los observadores registrados. Despu\xe9s, se elimina uno de los observadores y se cambia el estado del sujeto nuevamente, pero solo se notifica al observador que sigue registrado."),(0,o.kt)("p",null,"Este ejemplo muestra c\xf3mo el patr\xf3n Observer se puede utilizar para implementar la comunicaci\xf3n entre objetos de una manera eficiente y flexible."),(0,o.kt)("h4",{id:"desventajas-de-observer"},"Desventajas de Observer"),(0,o.kt)("p",null,"Aunque el patr\xf3n Observer tiene muchas ventajas, tambi\xe9n tiene algunas desventajas que es importante tener en cuenta:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Acoplamiento excesivo: El patr\xf3n Observer puede llevar a un acoplamiento excesivo entre el sujeto y los observadores. Los observadores pueden depender demasiado del sujeto, lo que puede hacer que sea dif\xedcil reutilizarlos en otros contextos.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Actualizaciones innecesarias: A veces, los observadores pueden recibir actualizaciones innecesarias del sujeto, lo que puede hacer que el sistema sea menos eficiente. Esto puede ser especialmente problem\xe1tico si el sujeto tiene muchos observadores.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Orden de actualizaci\xf3n: El orden en que se actualizan los observadores puede ser importante en algunos casos. Si el orden no se maneja adecuadamente, puede llevar a errores o comportamientos inesperados en el sistema.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Complejidad: La implementaci\xf3n del patr\xf3n Observer puede ser compleja en algunos casos, especialmente si el sistema tiene muchos sujetos y observadores. Esto puede hacer que el c\xf3digo sea m\xe1s dif\xedcil de entender y mantener."))),(0,o.kt)("p",null,"Es importante tener en cuenta estas desventajas al decidir si el patr\xf3n Observer es apropiado para un sistema en particular. En algunos casos, el patr\xf3n Observer puede ser la mejor opci\xf3n, pero en otros casos, puede haber patrones m\xe1s apropiados o soluciones alternativas."),(0,o.kt)("h4",{id:"test"},"Test"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 es el patr\xf3n Observer?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Un patr\xf3n creacional."),(0,o.kt)("li",{parentName:"ul"},"b) Un patr\xf3n estructural."),(0,o.kt)("li",{parentName:"ul"},"c) Un patr\xf3n de comportamiento.")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfCu\xe1l es el prop\xf3sito del patr\xf3n Observer?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Permitir que los objetos cambien su comportamiento en tiempo de ejecuci\xf3n."),(0,o.kt)("li",{parentName:"ul"},"b) Permitir que los objetos creen otros objetos."),(0,o.kt)("li",{parentName:"ul"},"c) Permitir que los objetos notifiquen a otros objetos sobre cambios en su estado.")),(0,o.kt)("p",null,"3.",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"\xbfCu\xe1les son los elementos principales del patr\xf3n Observer?"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Sujeto, observador y mensaje."),(0,o.kt)("li",{parentName:"ul"},"b) Sujeto, observador y notificaci\xf3n."),(0,o.kt)("li",{parentName:"ul"},"c) Sujeto, observador y actualizaci\xf3n.")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 ventaja proporciona el patr\xf3n Observer?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Reduce el acoplamiento entre objetos."),(0,o.kt)("li",{parentName:"ul"},"b) Permite que los objetos creen otros objetos de manera flexible."),(0,o.kt)("li",{parentName:"ul"},"c) Aumenta la complejidad del c\xf3digo.")),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfCu\xe1l es una desventaja del patr\xf3n Observer?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Puede causar actualizaciones innecesarias."),(0,o.kt)("li",{parentName:"ul"},"b) No proporciona un mecanismo para que los objetos cambien su comportamiento en tiempo de ejecuci\xf3n."),(0,o.kt)("li",{parentName:"ul"},"c) No tiene elementos principales claramente definidos.")),(0,o.kt)("p",null,"Respuestas:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"c) Un patr\xf3n de comportamiento."),(0,o.kt)("li",{parentName:"ol"},"c) Permitir que los objetos notifiquen a otros objetos sobre cambios en su estado."),(0,o.kt)("li",{parentName:"ol"},"b) Sujeto, observador y notificaci\xf3n."),(0,o.kt)("li",{parentName:"ol"},"a) Reduce el acoplamiento entre objetos."),(0,o.kt)("li",{parentName:"ol"},"a) Puede causar actualizaciones innecesarias.")),(0,o.kt)("h3",{id:"strategy"},"Strategy"),(0,o.kt)("p",null,"El patr\xf3n de dise\xf1o Strategy es especialmente \xfatil cuando se trabaja con algoritmos que tienen diferentes variaciones o formas de implementaci\xf3n. En lugar de tener que codificar todas estas variaciones en una \xfanica clase, se puede separar la implementaci\xf3n del algoritmo en diferentes clases que implementan una interfaz com\xfan."),(0,o.kt)("p",null,"Esto permite que el cliente (el objeto que utiliza el algoritmo) pueda seleccionar din\xe1micamente qu\xe9 implementaci\xf3n de la estrategia utilizar en tiempo de ejecuci\xf3n, lo que proporciona una mayor flexibilidad en el dise\xf1o del software."),(0,o.kt)("p",null,"Por ejemplo, si se tiene una aplicaci\xf3n de comercio electr\xf3nico que necesita calcular los precios de env\xedo, se pueden implementar diferentes estrategias para el c\xe1lculo de los precios de env\xedo, como c\xe1lculo basado en peso, c\xe1lculo basado en distancia, o c\xe1lculo basado en tiempo de entrega. Cada estrategia se implementar\xeda en su propia clase que implementa la misma interfaz com\xfan, y el cliente (por ejemplo, el proceso de checkout) puede seleccionar la estrategia adecuada en tiempo de ejecuci\xf3n."),(0,o.kt)("p",null,"El patr\xf3n de dise\xf1o Strategy tambi\xe9n ayuda a mantener el principio de responsabilidad \xfanica, ya que cada clase de estrategia se centra en una \xfanica variaci\xf3n del algoritmo, lo que facilita la comprensi\xf3n, mantenimiento y extensi\xf3n del c\xf3digo."),(0,o.kt)("p",null,"En resumen, el patr\xf3n de dise\xf1o Strategy proporciona una forma flexible y escalable de implementar diferentes variaciones de un algoritmo en una aplicaci\xf3n, permitiendo que el cliente seleccione din\xe1micamente la estrategia adecuada en tiempo de ejecuci\xf3n."),(0,o.kt)("h4",{id:"desventajas-de-strategy"},"Desventajas de Strategy"),(0,o.kt)("p",null,"Aunque el patr\xf3n de dise\xf1o Strategy tiene varias ventajas, tambi\xe9n presenta algunas desventajas a considerar:"),(0,o.kt)("p",null,"Aumento de complejidad: la implementaci\xf3n del patr\xf3n Strategy puede aumentar la complejidad del c\xf3digo, ya que se requiere la creaci\xf3n de m\xfaltiples clases para implementar cada variaci\xf3n del algoritmo."),(0,o.kt)("p",null,"Aumento de consumo de memoria: dado que cada estrategia es una clase separada, la implementaci\xf3n del patr\xf3n Strategy puede aumentar el consumo de memoria del sistema."),(0,o.kt)("p",null,"Mayor dificultad de comprensi\xf3n: la implementaci\xf3n del patr\xf3n Strategy puede dificultar la comprensi\xf3n del c\xf3digo para desarrolladores que no est\xe1n familiarizados con el patr\xf3n."),(0,o.kt)("p",null,"Aumento de la cantidad de c\xf3digo: se requiere la creaci\xf3n de varias clases para implementar cada variaci\xf3n del algoritmo, lo que puede aumentar la cantidad de c\xf3digo en la aplicaci\xf3n."),(0,o.kt)("p",null,"Mayor dificultad para la creaci\xf3n de nuevas estrategias: la creaci\xf3n de nuevas estrategias puede ser m\xe1s dif\xedcil que la implementaci\xf3n de una \xfanica clase con un algoritmo, ya que se requiere la creaci\xf3n de una nueva clase que implemente la interfaz de la estrategia."),(0,o.kt)("p",null,"En general, el patr\xf3n de dise\xf1o Strategy puede ser una buena opci\xf3n en situaciones en las que se necesita flexibilidad para cambiar el comportamiento del sistema, pero se debe tener en cuenta que puede aumentar la complejidad y el consumo de recursos de la aplicaci\xf3n."),(0,o.kt)("h5",{id:"ejemplo-de-desarrollo"},"Ejemplo de desarrollo"),(0,o.kt)("p",null,"En este ejemplo, tendremos diferentes estrategias para calcular descuentos en funci\xf3n del tipo de cliente: cliente regular, cliente leal y cliente VIP."),(0,o.kt)("p",null,"Primero, crearemos la interfaz com\xfan para todas las estrategias:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"interface DiscountStrategy {\n    public function calculateDiscount($amount): float;\n}\n")),(0,o.kt)("p",null,"Luego, crearemos las implementaciones concretas de la estrategia, que son las diferentes formas en que se puede calcular el descuento."),(0,o.kt)("p",null,"php\nCopy code\nclass RegularCustomerDiscount implements DiscountStrategy {\npublic function calculateDiscount($amount): float {\n// Calcular descuento para cliente regular\nreturn $amount * 0.05;\n}\n}"),(0,o.kt)("p",null,"class LoyalCustomerDiscount implements DiscountStrategy {\npublic function calculateDiscount($amount): float {\n// Calcular descuento para cliente leal\nreturn $amount * 0.10;\n}\n}"),(0,o.kt)("p",null,"class VIPCustomerDiscount implements DiscountStrategy {\npublic function calculateDiscount($amount): float {\n// Calcular descuento para cliente VIP\nreturn $amount * 0.15;\n}\n}\nPor \xfaltimo, crearemos el contexto, que es el objeto que utilizar\xe1 una estrategia para calcular el descuento:"),(0,o.kt)("p",null,"php\nCopy code\nclass ShoppingCart {\nprivate $discountStrategy;"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"public function __construct(DiscountStrategy $discountStrategy) {\n    $this->discountStrategy = $discountStrategy;\n}\n\npublic function setDiscountStrategy(DiscountStrategy $discountStrategy) {\n    $this->discountStrategy = $discountStrategy;\n}\n\npublic function calculateDiscount($amount): float {\n    return $this->discountStrategy->calculateDiscount($amount);\n}\n")),(0,o.kt)("p",null,"}\nEn este ejemplo, el contexto es la clase ShoppingCart, que tiene una propiedad discountStrategy que apunta a una instancia de la estrategia seleccionada. La clase ShoppingCart tiene un m\xe9todo calculateDiscount que toma el monto total de la compra y utiliza la estrategia seleccionada para calcular el descuento."),(0,o.kt)("p",null,"Para utilizar este patr\xf3n, se puede crear una instancia de la clase ShoppingCart y establecer la estrategia de descuento deseada:"),(0,o.kt)("p",null,"php\nCopy code\n$amount = 100;\n$cart = new ShoppingCart(new RegularCustomerDiscount());\n$discount = $cart->calculateDiscount($amount);\nEn este ejemplo, se est\xe1 utilizando la estrategia RegularCustomerDiscount para calcular el descuento, pero se puede cambiar la estrategia din\xe1micamente en tiempo de ejecuci\xf3n utilizando el m\xe9todo setDiscountStrategy."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"class RegularCustomerDiscount implements DiscountStrategy {\n    public function calculateDiscount($amount): float {\n        // Calcular descuento para cliente regular\n        return $amount * 0.05;\n    }\n}\n\nclass LoyalCustomerDiscount implements DiscountStrategy {\n    public function calculateDiscount($amount): float {\n        // Calcular descuento para cliente leal\n        return $amount * 0.10;\n    }\n}\n\nclass VIPCustomerDiscount implements DiscountStrategy {\n    public function calculateDiscount($amount): float {\n        // Calcular descuento para cliente VIP\n        return $amount * 0.15;\n    }\n}\n")),(0,o.kt)("p",null,"Por \xfaltimo, crearemos el contexto, que es el objeto que utilizar\xe1 una estrategia para calcular el descuento:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"class ShoppingCart {\n    private $discountStrategy;\n    \n    public function __construct(DiscountStrategy $discountStrategy) {\n        $this->discountStrategy = $discountStrategy;\n    }\n    \n    public function setDiscountStrategy(DiscountStrategy $discountStrategy) {\n        $this->discountStrategy = $discountStrategy;\n    }\n    \n    public function calculateDiscount($amount): float {\n        return $this->discountStrategy->calculateDiscount($amount);\n    }\n}\n")),(0,o.kt)("p",null,"En este ejemplo, el contexto es la clase ShoppingCart, que tiene una propiedad discountStrategy que apunta a una instancia de la estrategia seleccionada. La clase ShoppingCart tiene un m\xe9todo calculateDiscount que toma el monto total de la compra y utiliza la estrategia seleccionada para calcular el descuento."),(0,o.kt)("p",null,"Para utilizar este patr\xf3n, se puede crear una instancia de la clase ShoppingCart y establecer la estrategia de descuento deseada:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"$amount = 100;\n$cart = new ShoppingCart(new RegularCustomerDiscount());\n$discount = $cart->calculateDiscount($amount);\n")),(0,o.kt)("p",null,"En este ejemplo, se est\xe1 utilizando la estrategia ",(0,o.kt)("strong",{parentName:"p"},"*RegularCustomerDiscount")," para calcular el descuento, pero se puede cambiar la estrategia din\xe1micamente en tiempo de ejecuci\xf3n utilizando el m\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"setDiscountStrategy.")),(0,o.kt)("h4",{id:"test-1"},"Test"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 problema resuelve el patr\xf3n de dise\xf1o Strategy?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Permite definir un conjunto de algoritmos y encapsular cada uno de ellos dentro de un objeto separado."),(0,o.kt)("li",{parentName:"ul"},"b) Proporciona una forma de ocultar la complejidad de un objeto detr\xe1s de una interfaz simple y consistente."),(0,o.kt)("li",{parentName:"ul"},"c) Permite crear objetos sin especificar la clase exacta que se va a utilizar."),(0,o.kt)("li",{parentName:"ul"},"Respuesta: a)")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfCu\xe1l es el principal beneficio de usar el patr\xf3n de dise\xf1o Strategy?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Proporciona una estructura clara y f\xe1cil de mantener."),(0,o.kt)("li",{parentName:"ul"},"b) Permite una mayor reutilizaci\xf3n de c\xf3digo."),(0,o.kt)("li",{parentName:"ul"},"c) Reduce la complejidad y aumenta la flexibilidad del c\xf3digo."),(0,o.kt)("li",{parentName:"ul"},"Respuesta: c)")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfQu\xe9 elementos participan en el patr\xf3n de dise\xf1o Strategy?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Contexto, estrategias y clientes."),(0,o.kt)("li",{parentName:"ul"},"b) Contexto, estrategias y adaptadores."),(0,o.kt)("li",{parentName:"ul"},"c) Contexto, estrategias y observadores."),(0,o.kt)("li",{parentName:"ul"},"Respuesta: a)")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfCu\xe1l es la funci\xf3n de la interfaz en el patr\xf3n de dise\xf1o Strategy?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Define los m\xe9todos que ser\xe1n implementados por las diferentes estrategias."),(0,o.kt)("li",{parentName:"ul"},"b) Define los m\xe9todos que ser\xe1n utilizados por el cliente."),(0,o.kt)("li",{parentName:"ul"},"c) Define los m\xe9todos que ser\xe1n utilizados por el contexto."),(0,o.kt)("li",{parentName:"ul"},"Respuesta: a)")),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"\xbfCu\xe1ndo es apropiado utilizar el patr\xf3n de dise\xf1o Strategy?")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a) Cuando se desea proporcionar m\xfaltiples variantes de un algoritmo o comportamiento."),(0,o.kt)("li",{parentName:"ul"},"b) Cuando se desea ocultar la complejidad de un objeto detr\xe1s de una interfaz simple y consistente."),(0,o.kt)("li",{parentName:"ul"},"c) Cuando se desea crear objetos sin especificar la clase exacta que se va a utilizar."),(0,o.kt)("li",{parentName:"ul"},"Respuesta: a)")))}p.isMDXComponent=!0}}]);